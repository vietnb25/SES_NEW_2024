<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vn.ses.s3m.plus.dao.DeviceMapper">
    <resultMap id="dataDeviceResult" type="Device">
        <result property="id" column="id" />
        <result property="deviceId" column="deviceId" />
        <result property="deviceName" column="deviceName" />
        <result property="deviceCode" column="deviceCode" />
        <result property="systemTypeId" column="systemTypeId" />
        <result property="systemTypeName" column="systemTypeName" />
        <result property="deviceType" column="deviceType" />
        <result property="deviceTypeName" column="deviceTypeName" />
        <result property="customerId" column="customerId" />
        <result property="customerName" column="customerName" />
        <result property="managerId" column="managerId" />
        <result property="managerName" column="managerName" />
        <result property="areaId" column="areaId" />
        <result property="areaName" column="areaName" />
        <result property="projectId" column="projectId" />
        <result property="projectName" column="projectName" />
        <result property="systemMapId" column="systemMapId" />
        <result property="systemMapName" column="systemMapName" />
        <result property="address" column="address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />
        <result property="simNo" column="simNo" />
        <result property="power" column="power" />
        <result property="dcPower" column="dcPower" />
        <result property="acPower" column="acPower" />
        <result property="imccb" column="imccb" />
        <result property="state" column="state" />
        <result property="model" column="model" />
        <result property="voltage" column="voltage" />
        <result property="n" column="n" />
        <result property="amperage" column="amperage" />
        <result property="imaxString" column="imaxString" />
        <result property="cableIdA1" column="cableIdA1" />
        <result property="cableIdA2" column="cableIdA2" />
        <result property="cableIdA3" column="cableIdA3" />
        <result property="cableIdA4" column="cableIdA4" />
        <result property="cableIdA5" column="cableIdA5" />
        <result property="cableIdA6" column="cableIdA6" />
        <result property="cableIdA7" column="cableIdA7" />
        <result property="cableIdA8" column="cableIdA8" />
        <result property="cableIdA9" column="cableIdA9" />
        <result property="snGw" column="snGw" />
        <result property="dbId" column="dbId" />
        <result property="description" column="description" />
        <result property="pMax" column="pMax" />
        <result property="ip" column="ip" />
        <result property="uid" column="uid" />
        <result property="status" column="device_status" />
        <result property="createDate" column="createDate" />
        <result property="updateDate" column="updateDate" />
        <result property="sendDate" column="sent_date" />
        <result property="priorityFlag" column="priority_flag" />
        <result property="systemMapId" column="system_map_id" />
        <result property="sentDateInstance" column="sentDateInstance" />
        <result property="deviceCount" column="deviceCount" />

    </resultMap>

    <resultMap id="deviceListLostSignalResult" type="vn.ses.s3m.plus.response.DeviceLostSignalResponse">
        <result property="id" column="id" />
        <result property="deviceId" column="deviceId" />
        <result property="deviceName" column="deviceName" />
        <result property="sentDateInstance" column="sentDateInstance" />
        <result property="deviceCount" column="deviceCount" />
    </resultMap>

    <resultMap id="deviceNameData" type="DeviceName">
        <result property="deviceId" column="device_id" />
        <result property="deviceName" column="device_name" />
    </resultMap>
    <resultMap id="deviceGateway" type="Device">
        <result property="id" column="id" />
        <result property="deviceId" column="deviceId" />
        <result property="nrtu" column="nrtu" />
        <result property="sentDate" column="sentDate" />
        <result property="nmbtcp" column="nmbtcp" />
        <result property="nplc" column="nplc" />
        <result property="nws" column="nws" />
        <result property="ip" column="ip" />
        <result property="sim" column="sim" />
        <result property="status" column="status" />
        <result property="statusDevice" column="statusDevice" />
        <result property="description" column="description" />
    </resultMap>

    <resultMap id="instanceDataDeviceResult" type="Device">
        <result property="id" column="id" />
        <result property="deviceId" column="deviceId" />
        <result property="deviceName" column="deviceName" />
        <result property="deviceCode" column="deviceCode" />
        <result property="deviceType" column="device_type" />
        <result property="projectId" column="projectId" />
        <result property="systemMapId" column="systemMapId" />
        <result property="systemMapName" column="systemMapName" />
        <result property="address" column="address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />
        <result property="simNo" column="simNo" />
        <result property="power" column="power" />
        <result property="dcPower" column="dcPower" />
        <result property="acPower" column="acPower" />
        <result property="imccb" column="imccb" />
        <result property="state" column="state" />
        <result property="model" column="model" />
        <result property="voltage" column="voltage" />
        <result property="n" column="n" />
        <result property="amperage" column="amperage" />
        <result property="imaxString" column="imaxString" />
        <result property="cableIdA1" column="cableIdA1" />
        <result property="cableIdA2" column="cableIdA2" />
        <result property="cableIdA3" column="cableIdA3" />
        <result property="cableIdA4" column="cableIdA4" />
        <result property="cableIdA5" column="cableIdA5" />
        <result property="cableIdA6" column="cableIdA6" />
        <result property="cableIdA7" column="cableIdA7" />
        <result property="cableIdA8" column="cableIdA8" />
        <result property="cableIdA9" column="cableIdA9" />
        <result property="snGw" column="snGw" />
        <result property="pa" column="pa" />
        <result property="pb" column="pb" />
        <result property="pc" column="pc" />
        <result property="dbId" column="dbId" />
        <result property="description" column="description" />
        <result property="systemTypeId" column="systemTypeId" />
        <result property="pMax" column="pMax" />
        <result property="ip" column="ip" />
        <result property="uid" column="uid" />
        <result property="status" column="device_status" />
        <result property="createDate" column="createDate" />
        <result property="updateDate" column="updateDate" />
        <result property="sendDate" column="sent_date" />
        <result property="ppvPhA" column="PPVphA" />
        <result property="ppvPhB" column="PPVphB" />
        <result property="ppvPhC" column="PPVphC" />
        <result property="aPhaA" column="AphaA" />
        <result property="aPhaB" column="AphaB" />
        <result property="aPhaC" column="AphaC" />
        <result property="w" column="W" />
        <result property="t" column="t" />
        <result property="h" column="h" />
        <result property="indicator" column="indicator" />
        <result property="fs" column="fs" />
        <result property="p" column="P" />
    </resultMap>

    <resultMap id="deviceResult" type="Device">
        <result property="id" column="id" />
        <result property="deviceId" column="device_id" />
        <result property="deviceName" column="device_name" />
        <result property="deviceCode" column="device_code" />
        <result property="deviceType" column="device_type_id" />
        <result property="systemMapId" column="system_map_id" />
        <result property="systemTypeId" column="system_type_id" />
        <result property="projectId" column="project_id" />
        <result property="updateDate" column="update_date" />
        <result property="p" column="p" />
        <result property="fs" column="fs" />
        <result property="fm" column="fm" /> 
        <result property="t" column="t" />
        <result property="viewType" column="view_type" /> 
        <result property="viewTime" column="view_time" />
    </resultMap>

    <resultMap id="deviceListResult" type="Device"></resultMap>

    <resultMap id="deviceMstListResult" type="DeviceMst">
        <result property="deviceId" column="device_id" />
        <result property="deviceName" column="device_name" />
        <result property="deviceCode" column="device_code" />
        <result property="customerId" column="customer_id" />
        <result property="projectId" column="project_id" />
        <result property="deviceName" column="device_name" />
        <result property="systemTypeId" column="system_type_id" />
        <result property="managerId" column="manager_id" />
        <result property="areaId" column="area_id" />
        <result property="systemMapId" column="system_map_id" />
    </resultMap>

    <resultMap id="deviceMstResult" type="DeviceMst">
    	<result property="id" column="id" />
        <result property="deviceId" column="deviceId" />
        <result property="deviceName" column="deviceName" />
        <result property="deviceCode" column="deviceCode" />
        <result property="systemTypeId" column="systemTypeId" />
        <result property="systemTypeName" column="systemTypeName" />
        <result property="deviceType" column="deviceType" />
        <result property="deviceTypeName" column="deviceTypeName" />
        <result property="customerId" column="customerId" />
        <result property="customerName" column="customerName" />
        <result property="managerId" column="managerId" />
        <result property="managerName" column="managerName" />
        <result property="areaId" column="areaId" />
        <result property="areaName" column="areaName" />
        <result property="projectId" column="projectId" />
        <result property="projectName" column="projectName" />
        <result property="systemMapId" column="systemMapId" />
        <result property="systemMapName" column="systemMapName" />
        <result property="address" column="address" />
        <result property="latitude" column="latitude" />
        <result property="longitude" column="longitude" />
        <result property="fuelTypeId" column="fuelTypeId" />
        <result property="fuelFormId" column="fuelFormId" />
    </resultMap>

    <resultMap id="objectListResult" type="ObjectType"></resultMap>

    <resultMap id="weatherResult" type="DataWeather">
        <result property="id" column="id" />
        <result property="deviceId" column="device_id" />
        <result property="windSpeed" column="wind_speed" />
        <result property="windDirection" column="wind_direction" />
        <result property="radiation" column="radiation" />
        <result property="temperature" column="temperature" />
        <result property="humidity" column="humidity" />
        <result property="rainWater" column="rain_water" />
        <result property="atmos" column="atmos" />
        <result property="sentDate" column="sent_date" />
        <result property="transaction" column="transaction_date" />
    </resultMap>

    <resultMap id="inverterListResult" type="Inverter"></resultMap>

    <resultMap id="listDataPowerResult" type="DataPower"></resultMap>
    
     <resultMap id="dataPowerResultResult" type="DataPowerResult"></resultMap>

    <resultMap id="listEpLoadByMonthLandmark" type="LandmarksPlansEnergy"></resultMap>

    <select id="getDeviceListByListId" parameterType="map" resultMap="deviceResult">
    		select 
    		A.device_id, A.device_name 
    		from 
    		s3m_device A 
    		where 
    		A.device_id in (${listIdDevice});
     </select>
    <select id="getIds" resultMap="instanceDataDeviceResult">
        SELECT
        id,
        device_id AS deviceId,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN uab WHEN uab IS NULL THEN 0 ELSE 0 END AS uab,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ubc WHEN ubc IS NULL THEN 0 ELSE 0 END AS ubc,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN uca WHEN uca IS NULL THEN 0 ELSE 0 END AS uca,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN uan WHEN uan IS NULL THEN 0 ELSE 0 END AS uan,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ubn WHEN ubn IS NULL THEN 0 ELSE 0 END AS ubn,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ucn WHEN ucn IS NULL THEN 0 ELSE 0 END AS ucn,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ia WHEN ia IS NULL THEN 0 ELSE 0 END AS ia,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ib WHEN ib IS NULL THEN 0 ELSE 0 END AS ib,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ic WHEN ic IS NULL THEN 0 ELSE 0 END AS ic,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN p_total WHEN p_total IS NULL THEN 0 ELSE 0 END AS pTotal,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN pa WHEN pa IS NULL THEN 0 ELSE 0 END AS pa,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN pb WHEN pb IS NULL THEN 0 ELSE 0 END AS pb,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN pc WHEN pc IS NULL THEN 0 ELSE 0 END AS pc,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ep WHEN ep IS NULL THEN 0 ELSE 0 END AS ep,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN t1 WHEN t1 IS NULL THEN 0 ELSE 0 END AS t1,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN t2 WHEN t2 IS NULL THEN 0 ELSE 0 END AS t2,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN t3 WHEN t3 IS NULL THEN 0 ELSE 0 END AS t3,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ppvPhA WHEN ppvPhA IS NULL THEN 0 ELSE 0 END AS ppvPhA,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ppvPhB WHEN ppvPhB IS NULL THEN 0 ELSE 0 END AS ppvPhB,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ppvPhC WHEN ppvPhC IS NULL THEN 0 ELSE 0 END AS ppvPhC,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN aPhaA WHEN aPhaA IS NULL THEN 0 ELSE 0 END AS aPhaA,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN aPhaB WHEN aPhaB IS NULL THEN 0 ELSE 0 END AS aPhaB,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN aPhaC WHEN aPhaC IS NULL THEN 0 ELSE 0 END AS aPhaC,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN t WHEN t IS NULL THEN 0 ELSE 0 END AS t,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN h WHEN h IS NULL THEN 0 ELSE 0 END AS h,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN indicator WHEN indicator IS NULL THEN 0 ELSE 0 END AS indicator,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN pfa WHEN pfa IS NULL THEN 0 ELSE 0 END AS pfa,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN pfb WHEN pfb IS NULL THEN 0 ELSE 0 END AS pfb,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN pfc WHEN pfc IS NULL THEN 0 ELSE 0 END AS pfc,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN va WHEN va IS NULL THEN 0 ELSE 0 END AS va,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN vb WHEN vb IS NULL THEN 0 ELSE 0 END AS vb,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN vc WHEN vc IS NULL THEN 0 ELSE 0 END AS vc,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ia WHEN ia IS NULL THEN 0 ELSE 0 END AS iaI,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ib WHEN ib IS NULL THEN 0 ELSE 0 END AS ibI,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN ic WHEN ic IS NULL THEN 0 ELSE 0 END AS icI,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN device_status WHEN device_status IS NULL THEN -1 ELSE -1 END AS device_status,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN VdcCombiner WHEN VdcCombiner IS NULL THEN 0 ELSE 0 END AS VdcCombiner,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN IdcCombiner WHEN IdcCombiner IS NULL THEN 0 ELSE 0 END AS IdcCombiner,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN PdcCombiner WHEN PdcCombiner IS NULL THEN 0 ELSE 0 END AS PdcCombiner,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN VdcStr WHEN VdcStr IS NULL THEN 0 ELSE 0 END AS VdcStr,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN IdcStr WHEN IdcStr IS NULL THEN 0 ELSE 0 END AS IdcStr,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN U WHEN U IS NULL THEN 0 ELSE 0 END AS U,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN I WHEN I IS NULL THEN 0 ELSE 0 END AS I,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN TEMP WHEN TEMP IS NULL THEN 0 ELSE 0 END AS TEMP,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN H WHEN H IS NULL THEN 0 ELSE 0 END AS H,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN Rad WHEN Rad IS NULL THEN 0 ELSE 0 END AS Rad,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN InDCPR WHEN InDCPR IS NULL THEN 0 ELSE 0 END AS InDCPR,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN fs WHEN fs IS NULL THEN 0 ELSE 0 END AS fs,
        CASE WHEN TIMESTAMPDIFF(MINUTE, sent_date, NOW()) &lt; 30 THEN P WHEN P IS NULL THEN 0 ELSE 0 END AS P,
        sent_date,
        device_type
        FROM
        ${schema}s3m_instant_data
        WHERE
        device_id IN
        <foreach item="deviceId" collection="deviceIds" open="(" separator="," close=")">
             #{deviceId}
        </foreach>
        ORDER BY sent_date DESC
    </select>

    <select id="getDevice" resultMap="dataDeviceResult">
        SELECT
            *
	    FROM
	    	s3m_data_frame_1
	    WHERE
	    	device_id = #{deviceId}
	</select>

    <select id="getDevices" parameterType="map" resultMap="deviceMstResult">
        SELECT
            A.device_id AS deviceId,
            A.device_code AS deviceCode,
            A.device_name AS deviceName,
            A.device_type_id AS deviceTypeId,
            A.object_id AS objectId,
            A.address,
            B.system_map_id AS systemMapId,
            B.system_map_name AS systemMapName,
            C.project_name AS projectName,
            E.area_name AS areaName,
            D.name AS deviceTypeName,
            F.customer_name AS customerName,
            A.latitude,
            A.longitude,
            A.priority_flag,
            A.location,
            A.load_type_id,
            A.manufacturer,
            A.model,
            A.pn,
            A.in,
            A.vsc,
            A.vpr,
            A.f,
            A.delta_p0,
            A.delta_pk,
            A.i0,
            A.un,
            A.m_oil,
            A.m_all,
            A.exp_oil,
            A.exp_wind,
            A.hot_spot_factor,
            A.loss_ratio,
            A.const_k11,
            A.const_k21,
            A.const_k22,
            A.hot_spot_temp,
            A.hot_spot_gradient,
            A.avg_oil_temp_rise,
            A.top_oil_temp_rise,
            A.bottom_oil_temp_rise,
            A.const_time_oil,
            A.const_time_winding,
            A.vn,
            A.cable_length,
            A.rho,
            A.inc,
            A.pdc_max,
            A.vdc_max,
            A.vdc_rate,
            A.vac_rate,
            A.idc_max,
            A.iac_rate,
            A.iac_max,
            A.pac,
            A.eff,
            A.p_max as pMax,
            A.vmp,
            A.imp,
            A.voc,
            A.isc,
            A.gstc,
            A.tstc,
            A.gnoct,
            A.tnoct,
            A.cp_max,
            A.cvoc,
            A.cisc,
            A.ns,
            A.sensor_radiation_id,
            A.sensor_temperature_id,
            A.sim_no AS simNo,
            A.battery_capacity,
            A.work_date,
            A.reference_device_id,
            A.uid,
            A.db_id,
            A.description,
            A.update_date as updateDate
        FROM
            s3m_device A
            LEFT JOIN s3m_system_map B ON A.system_map_id = B.system_map_id
            LEFT JOIN s3m_project C ON A.project_id = C.project_id
            LEFT JOIN s3m_area E ON C.area_id = E.area_id
            LEFT JOIN s3m_device_type_mst D ON D.id = A.device_type_id
            LEFT JOIN s3m_customer F ON C.customer_id = F.customer_id
            LEFT JOIN s3m_object_type_mst G ON A.object_id = G.id
        WHERE
            A.device_id IS NOT NULL is not null
        <if test="systemMapId != null">
                AND B.system_map_id = #{systemMapId}
            </if>
        <if test="systemType != null">
                AND A.system_type_id = #{systemType}
            </if>
        <if test="projectId != null and projectId != ''">
                AND C.project_id = ${projectId}
            </if>
        <if test="projectName != null">
                AND C.project_name LIKE '%${projectName}%'
            </if>
        <if test="deviceType != null and deviceType != ''">
                AND D.id = ${deviceType}
            </if>
        <if test="customerId != null and customerId != ''">
                AND C.customer_id = #{customerId}
            </if>
        <if test="deviceName != null">
                AND device_name LIKE '%${deviceName}%'
            </if>
        <if test="keyword != null and keyword != ''">
                AND (A.device_code LIKE '%${keyword}%'
                OR A.device_name LIKE '%${keyword}%'
                OR F.customer_name LIKE '%${keyword}%'
                OR C.project_name LIKE '%${keyword}%'
                OR E.area_name LIKE '%${keyword}%'
                OR B.system_map_name LIKE '%${keyword}%'
                OR C.address LIKE '%${keyword}%')
            </if>
        AND A.delete_flag != 1
		GROUP BY A.device_id
        ORDER BY A.update_date DESC
    </select>

    <select id="getDevicesControl" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_code AS deviceCode,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            B.system_map_id AS systemMapId,
            B.system_map_name AS systemMapName,
            C.project_name AS projectName,
            E.area_name AS areaName,
            D.device_type_name AS deviceTypeName,
            F.customer_name AS customerName,
            A.address,
            A.latitude,
            A.longitude,
            A.sim_no AS simNo,
            A.power,
            A.ac_power AS acPower,
            A.dc_power AS dcPower,
            A.imccb AS imccb,
            A.p_max as pMax,
            A.voltage,
            A.amperage,
            A.cable_id_a1 AS cableIdA1,
            A.description,
            A.create_id AS createId,
            A.create_date AS createDate,
            A.update_id AS updateId,
            A.update_date AS updateDate,
            A.model AS model,
            A.p_max AS pMax
        FROM
            s3m_device A
            LEFT JOIN s3m_system_map B ON A.system_map_id = B.system_map_id
            LEFT JOIN s3m_project C ON A.project_id = C.project_id
            LEFT JOIN s3m_area E ON C.area_id = E.area_id
            LEFT JOIN s3m_device_type_mst D ON D.device_type_id = A.device_type AND D.system_type_id = A.system_type_id
            LEFT JOIN s3m_customer F ON C.customer_id = F.customer_id
        WHERE
            A.device_id IS NOT NULL

                AND B.system_map_id IS NOT NULL
        <if test="systemType != null">
                AND D.system_type_id = #{systemType}
            </if>
        <if test="projectId != null">
                AND C.project_id = ${projectId}
            </if>
        <if test="deviceType != null">
                AND D.device_type_id = ${deviceType}
            </if>
        AND A.delete_flag != 1
        GROUP BY A.device_id
        ORDER BY A.update_date DESC
    </select>

    <select id="getDeviceById" parameterType="map" resultMap="deviceMstResult">
        SELECT
            A.device_id AS deviceId,
            A.device_code AS deviceCode,
            A.device_name AS deviceName,
            A.system_type_id AS systemTypeId,
            T.system_type_name AS systemTypeName,
            A.device_type_id AS deviceTypeId,
            D.name AS deviceTypeName,
            B.customer_id AS customerId,
            B.customer_name AS customerName,
            M.manager_id as managerId,
            M.manager_name as managerName,
            E.area_id as areaId,
            E.area_name as areaName,
            C.project_id AS projectId,
            C.project_name AS projectName,
            A.object_id AS objectId,
            A.address,
            A.latitude,
            A.longitude,
            A.priority_flag,
            A.location,
            A.load_type_id,
            A.manufacturer,
            A.model,
            A.pn,
            A.in,
            A.vsc,
            A.vpr,
            A.f,
            A.delta_p0,
            A.delta_pk,
            A.i0,
            A.un,
            A.m_oil,
            A.m_all,
            A.exp_oil,
            A.exp_wind,
            A.hot_spot_factor,
            A.loss_ratio,
            A.const_k11,
            A.const_k21,
            A.const_k22,
            A.hot_spot_temp,
            A.hot_spot_gradient,
            A.avg_oil_temp_rise,
            A.top_oil_temp_rise,
            A.bottom_oil_temp_rise,
            A.const_time_oil,
            A.const_time_winding,
            A.vn,
            A.cable_length,
            A.rho,
            A.inc,
            A.pdc_max,
            A.vdc_max,
            A.vdc_rate,
            A.vac_rate,
            A.idc_max,
            A.iac_rate,
            A.iac_max,
            A.pac,
            A.eff,
            A.p_max as pMax,
            A.vmp,
            A.imp,
            A.voc,
            A.isc,
            A.gstc,
            A.tstc,
            A.gnoct,
            A.tnoct,
            A.cp_max,
            A.cvoc,
            A.cisc,
            A.ns,
            A.sensor_radiation_id,
            A.sensor_temperature_id,
            A.sim_no,
            A.battery_capacity,
            A.work_date,
            A.reference_device_id,
            A.uid,
            A.db_id,
            A.description,
            A.system_map_id AS systemMapId,
            A.fuel_type_id AS fuelTypeId,
            A.fuel_form_id AS fuelFormId,
            A.pdm AS pdm
    	FROM
    		s3m_device A
            LEFT JOIN s3m_project C ON A.project_id = C.project_id
            LEFT JOIN s3m_customer B ON C.customer_id = B.customer_id
            LEFT JOIN s3m_device_type_mst D ON D.id = A.device_type_id
            LEFT JOIN s3m_system_type T ON T.system_type_id = A.system_type_id
            LEFT JOIN s3m_area E ON C.area_id = E.area_id
            LEFT JOIN s3m_manager M ON M.manager_id = E.manager_id
            LEFT JOIN s3m_super_manager S ON  M.super_manager_id = S.id
    	WHERE
    		A.device_id IS NOT NULL
        <if test="deviceId != null">
                AND A.device_id = #{deviceId}
            </if>
        AND A.delete_flag != 1
        GROUP BY A.system_type_id
    </select>

    <select id="getDeviceByDeviceCode" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
            A.device_code AS deviceCode,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_map_id AS systemMapId,
            A.address,
            A.latitude,
            A.longitude,
            A.sim_no AS simNo,
            A.power,
            A.p_max as pMax,
            A.ac_power as acPower,
            A.dc_power as dcPower,
            A.model,
            A.voltage,
            A.cable_id_a1 AS cableIdA1,
            A.cable_id_a2 AS cableIdA2,
            A.cable_id_a3 AS cableIdA3,
            A.cable_id_a4 AS cableIdA4,
            A.cable_id_a5 AS cableIdA5,
            A.cable_id_a6 AS cableIdA6,
            A.cable_id_a7 AS cableIdA7,
            A.cable_id_a8 AS cableIdA8,
            A.cable_id_a9 AS cableIdA9,
            A.db_id AS dbId,
            A.description,
            A.create_id AS createId,
            A.create_date AS createDate,
            A.update_id AS updateId,
            A.update_date AS updateDate
        FROM
    		s3m_device A
        WHERE
    		A.device_id IS NOT NULL
        <if test="deviceCode != null">
                AND A.device_code = #{deviceCode}
            </if>
        AND A.delete_flag != 1
        ORDER BY create_date DESC
            LIMIT 1
    </select>

    <select id="checkDeviceByDeviceCode" parameterType="map" resultMap="deviceMstListResult">
        SELECT
            *
        FROM
            s3m_device A
        WHERE
            A.device_id IS NOT NULL
        <if test="deviceCode != null">
                AND A.device_code = #{deviceCode}
            </if>
        AND A.delete_flag != 1
        ORDER BY create_date DESC
            LIMIT 1
    </select>

    <select id="getDeviceByDeviceName" parameterType="java.lang.String" resultType="Device">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName
        FROM
            s3m_device A
        WHERE
            A.device_name = #{deviceName}
    </select>

    <select id="getDeviceName" parameterType="java.lang.String" resultType="Device">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.system_type_id AS systemTypeId
        FROM
            s3m_device A
        WHERE
            A.device_id = #{deviceId}
    </select>

    <select id="getDataDevice" parameterType="map" resultType="Device">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B. type_class AS typeClass
        FROM
            s3m_device A
        JOIN s3m_object_type_mst B ON B.object_type_id = #{objectTypeId}    
        WHERE
            A.device_id = #{deviceId}
    </select>

    <update id="updateDevice" parameterType="map">
        UPDATE
			s3m_device
			
		SET
			device_name = #{deviceName},
			address = #{address},
			latitude = #{latitude},
			longitude = #{longitude},
        <if test="simNo != null and simNo != '' ">
                sim_no = #{simNo},
            </if>
        power = #{power},
        <if test="acPower != null and acPower != '' ">
                ac_power = #{acPower},
            </if>
        dc_power = #{dcPower},
        <if test="imccb != null and imccb != '' ">
                imccb = #{imccb},
            </if>
        model = #{model},
			voltage = #{voltage},
			cable_id_a1 = #{cableIdA1},
        <if test="snGW != null and snGW != '' ">
                `s/n_gw` = #{snGW},
            </if>
        <if test="amperage != null and amperage != '' ">
                `amperage` = #{amperage},
            </if>
        <if test="amperageString != null and amperageString != '' ">
                imax_string = #{amperageString},
            </if>
        <if test="n != null and n != '' ">
                `n` = #{n},
            </if>
        <if test="cableIdA1 != null">
                `cable_id_a1` = #{cableIdA1},
            </if>
        <if test="cableIdA2 != null">
                `cable_id_a2` = #{cableIdA2},
            </if>
        <if test="cableIdA3 != null">
                `cable_id_a3` = #{cableIdA3},
            </if>
        <if test="cableIdA4 != null">
                `cable_id_a4` = #{cableIdA4},
            </if>
        <if test="cableIdA5 != null">
                `cable_id_a5` = #{cableIdA5},
            </if>
        <if test="cableIdA6 != null">
                `cable_id_a6` = #{cableIdA6},
            </if>
        <if test="cableIdA7 != null">
                `cable_id_a7` = #{cableIdA7},
            </if>
        <if test="cableIdA8 != null">
                `cable_id_a8` = #{cableIdA8},
            </if>
        <if test="Ns != null and Ns != '' ">
                Ns = #{NS},
            </if>
        <if test="Np != null and Np != '' ">
                Np = #{Np},
            </if>
        <if test="Isco != null and Isco != '' ">
                Isco = #{Isco}, 
            </if>
        <if test="Voco != null and Voco != '' ">
                Voco = #{Voco},
            </if>
        <if test="Impo != null and Impo != '' ">
                Impo = #{Impo},
            </if>
        <if test="aIsc != null and aIsc != '' ">
                aIsc = #{aIsc},
            </if>
        <if test="aImp != null and aImp != '' ">
                aImp = #{aImp},
            </if>
        <if test="C0 != null and C0 != '' ">
                C0 = #{C0},
            </if>
        <if test="C1 != null and C1 != '' ">
                C1 = #{C1},
            </if>
        <if test="bVoc != null and bVoc != '' ">
                bVoc = #{bVoc},
            </if>
        <if test="mBVoc != null and mBVoc != '' ">
                mBVoc = #{mBVoc},
            </if>
        <if test="bVmp != null and bVmp != '' ">
                bVmp = #{bVmp},
            </if>
        <if test="mBVmp != null and mBVmp != '' ">
                mBVmp = #{mBVmp},
            </if>
        <if test="C2 != null and C2 != '' ">
                C2 = #{C2},
            </if>
        <if test="C3 != null and C3 != '' ">
                C3 = #{C3},
            </if>
        <if test="dTc != null and dTc != '' ">
                dTc = #{dTc},
            </if>
        <if test="fd != null and fd != '' ">
                fd = #{fd},
            </if>
        <if test="a != null and a != '' ">
                a = #{a},
            </if>
        <if test="b != null and b != '' ">
                b = #{b},
            </if>
        <if test="C4 != null and C4 != '' ">
                C4 = #{C4},
            </if>
        <if test="C5 != null and C5 != '' ">
                C5 = #{C5},
            </if>
        <if test="Ix != null and Ix != '' ">
                Ix = #{Ix},
            </if>
        <if test="Ixx != null and Ixx != '' ">
                Ixx = #{Ixx},
            </if>
        <if test="C6 != null and C6 != '' ">
                C6 = #{C6},
            </if>
        <if test="C7 != null and C7 != '' ">
                C7 = #{C7},
            </if>
        <if test="e0 != null and e0 != '' ">
                e0 = #{e0},
            </if>
        <if test="T0 != null and T0 != '' ">
                T0 = #{T0},
            </if>
        <if test="k != null and k != '' ">
                k = #{k},
            </if>
        <if test="q != null and q != '' ">
                q = #{q},
            </if>
        <if test="airmass != null and airmass != '' ">
                airmass = #{airmass},
            </if>
        <if test="aoi != null and aoi != '' ">
                aoi = #{aoi},
            </if>
        <if test="P_diffuse != null and P_diffuse != '' ">
                P_diffuse = #{P_diffuse},
            </if>
        <if test="rpX != null"> 
                rpX = #{rpX},
            </if>
        <if test="rpY != null"> 
                rpY = #{rpY},
            </if>
        <if test="rul != null"> 
                rul = #{rul},
            </if>
        <if test="x != null"> 
                x = #{x},
            </if>
        <if test="v != null"> 
                v = #{v},
            </if>
        <if test="hs != null"> 
                hs = #{hs},
            </if>
        <if test="r != null"> 
                r = #{r},
            </if>
        <if test="k11 != null"> 
                k11 = #{k11},
            </if>
        <if test="k21 != null"> 
                k21 = #{k21},
            </if>
        <if test="k22 != null"> 
                k22 = #{k22},
            </if>
        <if test="deltaH != null"> 
                deltaH = #{deltaH},
            </if>
        <if test="deltaHR != null"> 
                deltaHR = #{deltaHR},
            </if>
        <if test="deltaAOMR != null"> 
                deltaAOMR = #{deltaAOMR},
            </if>
        <if test="deltaTOMR != null"> 
                deltaTOMR = #{deltaTOMR},
            </if>
        <if test="deltaBR != null"> 
                deltaBR = #{deltaBR},
            </if>
        <if test="tauO != null"> 
                tauO = #{tauO},
            </if>
        <if test="tauW != null"> 
                tauW = #{tauW},
            </if>
        <if test="loadType != null"> 
                loadType = #{loadType},
            </if>
        <if test="l != null"> 
                l = #{l},
            </if>
        <if test="r0 != null"> 
                r0 = #{r0},
            </if>
        <if test="pfMax != null"> 
                pfMax = #{pfMax},
            </if>
        <if test="weatherInfor != null ">
                weatherInfor = #{weatherInfor},
            </if>
        <if test="Ms != null and Ms != ''">
                Ms = #{Ms},
            </if>
        <if test="Mp != null and Mp != ''">
                Mp = #{Mp},
            </if>
        <if test="inverterInfor != null ">
                inverterInfor = #{inverterInfor},
            </if>
        <if test="timeSet != null and timeSet != '' ">
                timeSet = #{timeSet},
            </if>
        <if test="vmpo != null and vmpo != '' ">
                Vmpo = #{vmpo},
            </if>
        <if test="port != null and port != '' ">
                port = #{port},
            </if>
        <if test="port != null ">
                aDeg = #{aDeg},
            </if>
        <if test="Pmpo != null and Pmpo != '' ">
                Pmpo = #{Pmpo},
            </if>
        <if test="aPmp != null and aPmp != '' ">
                aPmp = #{aPmp},
            </if>
        <if test="TempNOCT != null and TempNOCT != '' ">
                TempNOCT = #{TempNOCT},
            </if>
        <if test="Eff0 != null and Eff0 != '' ">
                Eff0 = #{Eff0},
            </if>
        <if test="S != null and S != '' ">
                S = #{S},
            </if>
        <if test="objectTypeId != null and objectTypeId != '' ">
                object_type_id = #{objectTypeId},
            </if>
        <if test="objectName != null ">
                object_name = #{objectName},
            </if>
        <if test="area != null and area != '' ">
                area = #{area},
            </if>
        description = #{description},
			update_date = NOW()
		WHERE
			device_id = #{deviceId}
    </update>

    <update id="updateDeviceMst" parameterType="map">
        UPDATE
            s3m_device
            
        SET
            device_name = #{deviceName},
            address = #{address},
            latitude = #{latitude},
            longitude = #{longitude},
            location = #{location},
        <if test="priority_flag != null and priority_flag != ''">
            priority_flag = #{priority_flag},
          </if>
          <if test="load_type_id != null and load_type_id != ''">
            load_type_id = #{load_type_id},
          </if>
        <if test="manufacturer != null and manufacturer != ''">
            manufacturer = #{manufacturer},
          </if>
        <if test="model != null and model != ''">
            model = #{model},
          </if>
        <if test="pn != null and pn != ''">
            pn = #{pn},
          </if>
        <if test="`in` != null">
            `in` = #{in},
          </if>
        <if test="vsc != null and vsc != ''">
            vsc = #{vsc},
          </if>
        <if test="vpr != null and vpr != ''">
            vpr = #{vpr},
          </if>
        <if test="f != null and f != ''">
            f = #{f},
          </if>
        <if test="delta_p0 != null and delta_p0 != ''">
            delta_p0 = #{delta_p0},
          </if>
        <if test="delta_pk != null and delta_pk != ''">
            delta_pk = #{delta_pk},
          </if>
        <if test="i0 != null and i0 != ''">
            i0 = #{i0},
          </if>
        <if test="un != null and un != ''">
            un = #{un},
          </if>
        <if test="m_oil != null and m_oil != ''">
            m_oil = #{m_oil},
          </if>
        <if test="m_all != null and m_all != ''">
            m_all = #{m_all},
          </if>
        <if test="exp_oil != null and exp_oil != ''">
            exp_oil = #{exp_oil},
          </if>
        <if test="exp_wind != null and exp_wind != ''">
            exp_wind = #{exp_wind},
          </if>
        <if test="hot_spot_factor != null and hot_spot_factor != ''">
            hot_spot_factor = #{hot_spot_factor},
          </if>
        <if test="loss_ratio != null and loss_ratio != ''">
            loss_ratio = #{loss_ratio},
          </if>
        <if test="const_k11 != null and const_k11 != ''">
            const_k11 = #{const_k11},
          </if>
        <if test="const_k21 != null and const_k21 != ''">
            const_k21 = #{const_k21},
          </if>
        <if test="const_k22 != null and const_k22 != ''">
            const_k22 = #{const_k22},
          </if>
        <if test="hot_spot_temp != null and hot_spot_temp != ''">
           hot_spot_temp = #{hot_spot_temp},
          </if>
        <if test="hot_spot_gradient != null and hot_spot_gradient != ''">
            hot_spot_gradient = #{hot_spot_gradient},
          </if>
        <if test="avg_oil_temp_rise != null and avg_oil_temp_rise != ''">
            avg_oil_temp_rise = #{avg_oil_temp_rise},
          </if>
        <if test="top_oil_temp_rise != null and top_oil_temp_rise != ''">
            top_oil_temp_rise = #{top_oil_temp_rise},
          </if>
        <if test="bottom_oil_temp_rise != null and bottom_oil_temp_rise != ''">
            bottom_oil_temp_rise = #{bottom_oil_temp_rise},
          </if>
        <if test="const_time_oil != null and const_time_oil != ''">
            const_time_oil = #{const_time_oil},
          </if>
        <if test="const_time_winding != null and const_time_winding != ''">
            const_time_winding = #{const_time_winding},
          </if>
        <if test="vn != null and vn != ''">
            vn = #{vn},
          </if>
        <if test="cable_length != null and cable_length != ''">
            cable_length = #{cable_length},
          </if>
        <if test="rho != null and rho != ''">
            rho = #{rho},
          </if>
        <if test="inc != null and inc != ''">
            inc = #{inc},
          </if>
        <if test="pdc_max != null and pdc_max != ''">
            pdc_max = #{pdc_max},
          </if>
        <if test="vdc_max != null and vdc_max != ''">
            vdc_max = #{vdc_max},
          </if>
        <if test="vdc_rate != null and vdc_rate != ''">
            vdc_rate = #{vdc_rate},
          </if>
        <if test="vac_rate != null and vac_rate != ''">
            vac_rate = #{vac_rate},
          </if>
        <if test="idc_max != null and idc_max != ''">
            idc_max = #{idc_max},
          </if>
        <if test="iac_rate != null and iac_rate != ''">
            iac_rate = #{iac_rate},
          </if>
        <if test="iac_max != null and iac_max != ''">
            iac_max = #{iac_max},
          </if>
        <if test="pac != null and pac != ''">
            pac = #{pac},
          </if>
        <if test="eff != null and eff != ''">
            eff = #{eff},
          </if>
        <if test="p_max != null and p_max != ''">
            p_max = #{p_max},
          </if>
        <if test="vmp != null and vmp != ''">
            vmp = #{vmp},
          </if>
        <if test="imp != null and imp != ''">
            imp = #{imp},
          </if>
        <if test="voc != null and voc != ''">
            voc = #{voc},
          </if>
        <if test="isc != null and isc != ''">
            isc = #{isc},
          </if>
        <if test="gstc != null and gstc != ''">
            gstc = #{gstc},
          </if>
        <if test="tstc != null and tstc != ''">
            tstc = #{tstc},
          </if>
        <if test="gnoct != null and gnoct != ''">
            gnoct = #{gnoct},
          </if>
        <if test="tnoct != null and tnoct != ''">
            tnoct = #{tnoct},
          </if>
        <if test="cp_max != null and cp_max != ''">
            cp_max = #{cp_max},
          </if>
        <if test="cvoc != null and cvoc != ''">
            cvoc = #{cvoc},
          </if>
        <if test="cisc != null and cisc != ''">
            cisc = #{cisc},
          </if>
        <if test="ns != null and ns != ''">
            ns = #{ns},
          </if>
        <if test="sensor_radiation_id != null and sensor_radiation_id != ''">
            sensor_radiation_id = #{sensor_radiation_id},
          </if>
        <if test="sensor_temperature_id != null and sensor_temperature_id != ''">
            sensor_temperature_id = #{sensor_temperature_id},
          </if>
        <if test="sim_no != null and sim_no != ''">
            sim_no = #{sim_no},
          </if>
        <if test="battery_capacity != null and battery_capacity != ''">
            battery_capacity = #{battery_capacity},
          </if>
        <if test="work_date != null and work_date != ''">
            work_date = #{work_date},
          </if>
        <if test="reference_device_id != null and reference_device_id != ''">
            reference_device_id = #{reference_device_id},
          </if>
        <if test="uid != null and uid != ''">
            uid = #{uid},
          </if>
        <if test="db_id != null and db_id != ''">
            db_id = #{db_id},
          </if>
        <if test="fuelTypeId != null and fuelTypeId != '' "> 
          fuel_type_id = #{fuelTypeId},
        </if>
        <if test="fuelFormId != null and fuelFormId != '' ">
            fuel_form_id = #{fuelFormId},
        </if>
          <if test="pdm != null and pdm != ''">
            pdm = #{pdm},
          </if>
        description = #{description},
            update_date = NOW()
        WHERE
            device_id = #{deviceId}
    </update>

    <insert id="addDevice" parameterType="vn.ses.s3m.plus.form.DeviceForm">
        INSERT INTO `s3m_plus`.`s3m_device` (
        <if test="deviceCode != null and deviceCode != '' ">
          `device_code`, 
        </if>
        <if test="deviceName != null and deviceName != '' ">
          `device_name`,
          </if>
        <if test="deviceType != null and deviceType != '' "> 
          `device_type`,
          </if>
        <if test="projectId != null and projectId != '' "> 
          `project_id`,
          </if>
        <if test="systemMapId != null and systemMapId != '' "> 
          `system_map_id`,
          </if>
        <if test="address != null and address != '' "> 
          `address`,
          </if>
        <if test="latitude != null and latitude != '' ">
          `latitude`,
          </if>
        <if test="longitude != null and longitude != '' "> 
          `longitude`,
          </if>
        <if test="simNo != null and simNo != '' ">
          `sim_no`,
          </if>
        <if test="power != null and power != '' "> 
          `power`,
          </if>
        <if test="dcPower != null and dcPower != '' "> 
          `dc_power`,
          </if>
        <if test="acPower != null and acPower != '' "> 
          `ac_power`,
          </if>
        <if test="state != null and state != '' "> 
          `state`,
          </if>
        <if test="model != null and model != '' "> 
          `model`,
          </if>
        <if test="voltage != null"> 
          `voltage`,
          </if>
        <if test="n != null and n != '' "> 
          `n`,
          </if>
        <if test="amperage != null and amperage != '' "> 
          `amperage`,
          </if>
        <if test="cableIdA1 != null"> 
          `cable_id_a1`,
          </if>
        <if test="cableIdA2 != null"> 
          `cable_id_a2`,
          </if>
        <if test="cableIdA3 != null"> 
          `cable_id_a3`,
          </if>
        <if test="cableIdA4 != null"> 
          `cable_id_a4`,
          </if>
        <if test="cableIdA5 != null "> 
          `cable_id_a5`,
          </if>
        <if test="cableIdA6 != null"> 
          `cable_id_a6`,
          </if>
        <if test="cableIdA7 != null"> 
          `cable_id_a7`,
          </if>
        <if test="cableIdA8 != null"> 
          `cable_id_a8`,
          </if>
        <if test="cableIdA9 != null"> 
          `cable_id_a9`,
          </if>
        <if test="snGW != null and snGW != '' "> 
          `s/n_gw`,
          </if>
        <if test="dbId != null and dbId != '' "> 
          `db_id`,
          </if>
        `delete_flag`,
        <if test="description != null and description != '' "> 
          `description`,
          </if>
        <if test="systemTypeId != null and systemTypeId != '' ">
          `system_type_id`,
          </if>
        <if test="pMax != null and pMax != '' ">
          `p_max`,
          </if>
        <if test="ip != null and ip != '' "> 
          `ip`,
          </if>
        <if test="uid != null and uid != '' "> 
          `uid`,
          </if>
        <if test="imccb != null and imccb != '' "> 
          `imccb`,
          </if>
        `calculate_flag`,
        <if test="series_cell != null and series_cell != '' "> 
          `Ns`,
          </if>
        <if test="parallel_cell != null and parallel_cell != '' "> 
          `Np`,
          </if>
        <if test="isc != null and isc != '' "> 
          `Isco`,
          </if>
        <if test="voc != null and voc != '' "> 
          `Voco`,
          </if>
        <if test="imp != null and imp != '' "> 
          `Impo`,
          </if>
        <if test="aisc != null and aisc != '' "> 
          `aIsc`,
          </if>
        <if test="aimp != null and aimp != '' "> 
          `aImp`,
          </if>
        <if test="c0 != null and c0 != '' "> 
          `C0`,
          </if>
        <if test="c1 != null and c1 != '' "> 
          `C1`,
          </if>
        <if test="bvoc != null and voc != '' "> 
          `bVoc`,
          </if>
        <if test="mbvoc != null and mbvoc != '' "> 
          `mBVoc`,
          </if>
        <if test="bvmp != null and bvmp != '' "> 
          `bVmp`,
          </if>
        <if test="c2 != null and c2 != '' "> 
          `C2`,
          </if>
        <if test="c3 != null and c3 != '' "> 
          `C3`,
          </if>
        <if test="fd != null and fd != '' "> 
          `fd`,
          </if>
        <if test="a != null and a != '' "> 
          `a`,
          </if>
        <if test="b != null and b != '' "> 
          `b`,
          </if>
        <if test="c4 != null and c4 != '' "> 
          `C4`,
          </if>
        <if test="c5 != null and c5 != '' "> 
          `C5`,
          </if>
        <if test="ix != null and ix != '' "> 
          `Ix`,
          </if>
        <if test="ixx != null and ixx != '' "> 
          `Ixx`,
          </if>
        <if test="c6 != null and c6 != '' "> 
          `C6`,
          </if>
        <if test="c7 != null and c7 != '' "> 
          `C7`,
          </if>
        <if test="e0 != null and e0 != '' "> 
          `e0`,
          </if>
        <if test="t0 != null and t0 != '' "> 
          `T0`,
          </if>
        <if test="k != null and k != '' "> 
          `k`,
          </if>
        <if test="q != null and q != '' "> 
          `q`,
          </if>
        <if test="airmass != null and airmass != '' "> 
          `airmass`,
          </if>
        <if test="aoi != null and aoi != '' "> 
          `aoi`,
          </if>
        <if test="p_diffuse != null "> 
          `P_diffuse`,
          </if>
        <if test="dtc != null and dtc != '' "> 
          `dTc`,
          </if>
        <if test="mbvmp != null and mbvmp != '' "> 
          `mBVmp`,
            </if>
        <if test="rpX != null"> 
          `rpX`,
          </if>
        <if test="rpY != null"> 
          `rpY`,
          </if>
        <if test="loadType != null"> 
           loadType,
          </if>
        <if test="l != null"> 
           l,
          </if>
        <if test="r0 != null"> 
           r0,
          </if>
        <if test="pfMax != null"> 
           pfMax,
          </if>
        <if test="weatherInfor != null "> 
          `weatherInfor`,
            </if>
        <if test="inverterInfor != null "> 
          `InverterInfor`,
            </if>
        <if test="timeSet != null and timeSet != '' "> 
          `timeSet`,
            </if>
        <if test="series_modul != null and series_modul != '' "> 
          `Ms`,
            </if>
        <if test="parallel_modul != null and parallel_modul != '' "> 
          `Mp`,
            </if>
        <if test="vmpo != null and vmpo != '' "> 
          `Vmpo`,
            </if>
        <if test="rul != null and rul != '' "> 
          `rul`,
            </if>
        <if test="x != null and x != '' "> 
          `x`,
            </if>
        <if test="v != null and v != '' "> 
          `v`,
            </if>
        <if test="hs != null and hs != '' "> 
          `hs`,
            </if>
        <if test="r != null and r != '' "> 
          `r`,
            </if>
        <if test="k11 != null and k11 != '' "> 
          `k11`,
            </if>
        <if test="k21 != null and k21 != '' "> 
          `k21`,
            </if>
        <if test="k22 != null and k22 != '' "> 
          `k22`,
            </if>
        <if test="deltaH != null and deltaH != '' "> 
          `deltaH`,
            </if>
        <if test="deltaHR != null and deltaHR != '' "> 
          `deltaHR`,
            </if>
        <if test="deltaAOMR != null and deltaAOMR != '' "> 
          `deltaAOMR`,
            </if>
        <if test="deltaTOMR != null and deltaTOMR != '' "> 
          `deltaTOMR`,
            </if>
        <if test="deltaBR != null and deltaBR != '' "> 
          `deltaBR`,
            </if>
        <if test="tauO != null and tauO != '' "> 
          `tauO`,
            </if>
        <if test="tauW != null and tauW != '' "> 
          `tauW`,
            </if>
        <if test="port != null and port != '' "> 
          `port`,
            </if>
        <if test="adeg != null and adeg != '' "> 
          `aDeg`,
            </if>
        <if test="pmpo != null and pmpo != '' "> 
          `Pmpo`,
            </if>
        <if test="apmp != null and apmp != '' "> 
          `aPmp`,
            </if>
        <if test="tempNOCT != null and tempNOCT != '' "> 
          `TempNOCT`,
            </if>
        <if test="eff0 != null and eff0 != '' "> 
          `Eff0`,
            </if>
        <if test="s != null and s != '' "> 
          `S`,
            </if>
        <if test="objectTypeId != null and objectTypeId != '' "> 
          `object_type_id`,
            </if>
        <if test="objectName != null and objectName != '' "> 
          `object_name`,
            </if>
        <if test="area != null and area != '' "> 
          `area`,
       </if>
        `create_date`,
          `update_date`
          ) 
      VALUES (
        <if test="deviceCode != null and deviceCode != '' ">
          #{deviceCode}, 
        </if>
        <if test="deviceName != null and deviceName != '' ">
          #{deviceName},
          </if>
        <if test="deviceType != null and deviceType != '' "> 
          #{deviceType},
          </if>
        <if test="projectId != null and projectId != '' "> 
          #{projectId},
          </if>
        <if test="systemMapId != null and systemMapId != '' "> 
          #{systemMapId},
          </if>
        <if test="address != null and address != '' "> 
          #{address},
          </if>
        <if test="latitude != null and latitude != '' ">
          #{latitude},
          </if>
        <if test="longitude != null and longitude != '' "> 
          #{longitude},
          </if>
        <if test="simNo != null and simNo != '' ">
          #{simNo},
          </if>
        <if test="power != null and power != '' "> 
          #{power},
          </if>
        <if test="dcPower != null and dcPower != '' "> 
          #{dcPower},
          </if>
        <if test="acPower != null and acPower != '' "> 
          #{acPower},
          </if>
        <if test="state != null and state != '' "> 
          #{state},
          </if>
        <if test="model != null and model != '' "> 
          #{model},
          </if>
        <if test="voltage != null"> 
          #{voltage},
          </if>
        <if test="n != null and n != '' "> 
          #{n},
          </if>
        <if test="amperage != null and amperage != '' "> 
          #{amperage},
          </if>
        <if test="cableIdA1 != null"> 
          #{cableIdA1},
          </if>
        <if test="cableIdA2 != null"> 
          #{cableIdA2},
          </if>
        <if test="cableIdA3 != null"> 
          #{cableIdA3},
          </if>
        <if test="cableIdA4 != null"> 
          #{cableIdA4},
          </if>
        <if test="cableIdA5 != null"> 
          #{cableIdA5},
          </if>
        <if test="cableIdA6 != null"> 
          #{cableIdA6},
          </if>
        <if test="cableIdA7 != null"> 
          #{cableIdA7},
          </if>
        <if test="cableIdA8 != null"> 
          #{cableIdA8},
          </if>
        <if test="cableIdA9 != null"> 
          #{cableIdA9},
          </if>
        <if test="snGW != null and snGW != '' "> 
          #{snGW},
          </if>
        <if test="dbId != null and dbId != '' "> 
          #{dbId},
          </if>
        `delete_flag`,
        <if test="description != null and description != '' "> 
          #{description},
          </if>
        <if test="systemTypeId != null and systemTypeId != '' ">
          #{systemTypeId},
          </if>
        <if test="pMax != null and pMax != '' ">
          #{pMax},
          </if>
        <if test="ip != null and ip != '' "> 
          #{ip},
          </if>
        <if test="uid != null and uid != '' "> 
          #{uid},
          </if>
        <if test="imccb != null and imccb != '' "> 
          #{imccb},
          </if>
        `calculate_flag`,
        <if test="series_cell != null and series_cell != '' "> 
          #{series_cell},
          </if>
        <if test="parallel_cell != null and parallel_cell != '' "> 
          #{parallel_cell},
          </if>
        <if test="isc != null and isc != '' "> 
          #{isc},
          </if>
        <if test="voc != null and voc != '' "> 
          #{voc},
          </if>
        <if test="imp != null and imp != '' "> 
          #{imp},
          </if>
        <if test="aisc != null and aisc != '' "> 
          #{aisc},
          </if>
        <if test="aimp != null and aimp != '' "> 
          #{aimp},
          </if>
        <if test="c0 != null and c0 != '' "> 
          #{c0},
          </if>
        <if test="c1 != null and c1 != '' "> 
          #{c1},
          </if>
        <if test="bvoc != null and bvoc != '' "> 
          #{bvoc},
          </if>
        <if test="mbvoc != null and mbvoc != '' "> 
          #{mbvoc},
          </if>
        <if test="bvmp != null and bvmp != '' "> 
          #{bvmp},
          </if>
        <if test="c2 != null and c2 != '' "> 
          #{c2},
          </if>
        <if test="c3 != null and c3 != '' "> 
          #{c3},
          </if>
        <if test="fd != null and fd != '' "> 
          #{fd},
          </if>
        <if test="a != null and a != '' "> 
          #{a},
          </if>
        <if test="b != null and b != '' "> 
          #{b},
          </if>
        <if test="c4 != null and c4 != '' "> 
          #{c4},
          </if>
        <if test="c5 != null and c5 != '' "> 
          #{c5},
          </if>
        <if test="ix != null and ix != '' "> 
          #{ix},
          </if>
        <if test="ixx != null and ixx != '' "> 
          #{ixx},
          </if>
        <if test="c6 != null and c6 != '' "> 
          #{c6},
          </if>
        <if test="c7 != null and c7 != '' "> 
          #{c7},
          </if>
        <if test="e0 != null and e0 != '' "> 
          #{e0},
          </if>
        <if test="t0 != null and t0 != '' "> 
          #{t0},
          </if>
        <if test="k != null and k != '' "> 
          #{k},
          </if>
        <if test="q != null and q != '' "> 
          #{q},
          </if>
        <if test="airmass != null and airmass != '' "> 
          #{airmass},
          </if>
        <if test="aoi != null and aoi != '' "> 
          #{aoi},
          </if>
        <if test="p_diffuse != null "> 
          #{p_diffuse},
          </if>
        <if test="dtc != null and dtc != '' "> 
          #{dtc},
          </if>
        <if test="mbvmp != null"> 
          #{mbvmp},
            </if>
        <if test="rpX != null"> 
          #{rpX},
          </if>
        <if test="rpY != null"> 
          #{rpY},
          </if>
        <if test="loadType != null"> 
          #{loadType},
          </if>
        <if test="l != null"> 
          #{l},
          </if>
        <if test="r0 != null"> 
          #{r0},
          </if>
        <if test="pfMax != null"> 
          #{pfMax},
          </if>
        <if test="mbvmp != null and mbvmp != '' "> 
          #{mbvmp},
            </if>
        <if test="weatherInfor != null "> 
          #{weatherInfor},
            </if>
        <if test="inverterInfor != null "> 
          #{inverterInfor},
            </if>
        <if test="timeSet != null and timeSet != '' "> 
          #{timeSet},
            </if>
        <if test="series_modul != null and series_modul != '' "> 
          #{series_modul},
            </if>
        <if test="parallel_modul != null and parallel_modul != '' "> 
          #{parallel_modul},
            </if>
        <if test="vmpo != null and vmpo != '' "> 
          #{vmpo},
            </if>
        <if test="rul != null and rul != '' "> 
          #{rul},
            </if>
        <if test="x != null and x != '' "> 
          #{x},
            </if>
        <if test="v != null and v != '' "> 
         #{v},
            </if>
        <if test="hs != null and hs != '' "> 
          #{hs},
            </if>
        <if test="r != null and r != '' "> 
          #{r},
            </if>
        <if test="k11 != null and k11 != '' "> 
         #{k11},
            </if>
        <if test="k21 != null and k21 != '' "> 
          #{k21},
            </if>
        <if test="k22 != null and k22 != '' "> 
          #{k22},
            </if>
        <if test="deltaH != null and deltaH != '' "> 
          #{deltaH},
            </if>
        <if test="deltaHR != null and deltaHR != '' "> 
          #{deltaHR},
            </if>
        <if test="deltaAOMR != null and deltaAOMR != '' "> 
          #{deltaAOMR},
            </if>
        <if test="deltaTOMR != null and deltaTOMR != '' "> 
          #{deltaTOMR},
            </if>
        <if test="deltaBR != null and deltaBR != '' "> 
          #{deltaBR},
            </if>
        <if test="tauO != null and tauO != '' "> 
          #{tauO},
            </if>
        <if test="tauW != null and tauW != '' "> 
          #{tauW},
            </if>
        <if test="port != null and port != '' "> 
          #{port},
            </if>
        <if test="adeg != null and adeg != '' "> 
          #{adeg},
            </if>
        <if test="pmpo != null and pmpo != '' "> 
          #{pmpo},
            </if>
        <if test="apmp != null and apmp != '' "> 
          #{apmp},
            </if>
        <if test="tempNOCT != null and tempNOCT != '' "> 
          #{tempNOCT},
            </if>
        <if test="eff0 != null and eff0 != '' "> 
          #{eff0},
            </if>
        <if test="s != null and s != '' "> 
          #{s},
            </if>
        <if test="objectTypeId != null and objectTypeId != '' "> 
          #{objectTypeId},
            </if>
        <if test="objectName != null and objectName != '' "> 
          #{objectName},
            </if>
        <if test="area != null and area != '' "> 
          #{area},
            </if>
    
        NOW(),
            NOW())
    </insert>

    <insert id="addDeviceMst" parameterType="vn.ses.s3m.plus.form.DeviceMstForm" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO `s3m_plus`.`s3m_device` (
        <if test="customerId != null and customerId != '' "> 
          `customer_id`,
          </if>
        <if test="projectId != null and projectId != '' "> 
          `project_id`,
          </if>
        <if test="systemTypeId != null and systemTypeId != '' "> 
          `system_type_id`,
          </if>
        <if test="superManagerId != null and superManagerId != '' "> 
          `super_manager_id`,
          </if>
        <if test="managerId != null and managerId != '' "> 
          `manager_id`,
          </if>
        <if test="areaId != null and areaId != '' "> 
          `area_id`,
          </if>
        <if test="address != null and address != '' "> 
          `address`,
          </if>
        <if test="latitude != null and latitude != '' ">
          `latitude`,
          </if>
        <if test="longitude != null and longitude != '' "> 
          `longitude`,
          </if>
        <if test="deviceName != null and deviceName != '' ">
          `device_name`,
          </if>
        <if test="deviceTypeId != null and deviceTypeId != '' "> 
          `device_type_id`,
          </if>
        <if test="objectId != null and objectId != '' "> 
          `object_id`,
          </if>
        <if test="deviceCode != null and deviceCode != '' ">
          `device_code`, 
        </if>
        <if test="priority_flag != null and priority_flag != ''">
            `priority_flag`,
          </if>
        <if test="location != null and location != ''">
            `location`,
          </if>
           <if test="load_type_id != null and load_type_id != ''">
            `load_type_id`,
          </if>
        <if test="manufacturer != null and manufacturer != ''">
            `manufacturer`,
          </if>
        <if test="model != null and model != ''">
            `model`,
          </if>
        <if test="pn != null">
            `pn`,
          </if>
        <if test="`in` != null">
            `in`,
          </if>
        <if test="vsc != null">
            `vsc`,
          </if>
        <if test="vpr != null ">
            `vpr`,
          </if>
        <if test="f != null ">
            `f`,
          </if>
        <if test="delta_p0 != null">
            `delta_p0`,
          </if>
        <if test="delta_pk != null">
            `delta_pk`,
          </if>
        <if test="i0 != null">
            `i0`,
          </if>
        <if test="un != null">
            `un`,
          </if>
        <if test="m_oil != null ">
            `m_oil`,
          </if>
        <if test="m_all != null">
            `m_all`,
          </if>
        <if test="exp_oil != null">
            `exp_oil`,
          </if>
        <if test="exp_wind != null">
            `exp_wind`,
          </if>
        <if test="hot_spot_factor != null ">
            `hot_spot_factor`,
          </if>
        <if test="loss_ratio != null ">
            `loss_ratio`,
          </if>
        <if test="const_k11 != null">
            `const_k11`,
          </if>
        <if test="const_k21 != null">
            `const_k21`,
          </if>
        <if test="const_k22 != null">
            `const_k22`,
          </if>
        <if test="hot_spot_temp != null ">
            `hot_spot_temp`,
          </if>
        <if test="hot_spot_gradient != null">
            `hot_spot_gradient`,
          </if>
        <if test="avg_oil_temp_rise != null">
            `avg_oil_temp_rise`,
          </if>
        <if test="top_oil_temp_rise != null ">
            `top_oil_temp_rise`,
          </if>
        <if test="bottom_oil_temp_rise != null">
            `bottom_oil_temp_rise`,
          </if>
        <if test="const_time_oil != null">
            `const_time_oil`,
          </if>
        <if test="const_time_winding != null">
            `const_time_winding`,
          </if>
        <if test="vn != null ">
            `vn`,
          </if>
        <if test="cable_length != null ">
            `cable_length`,
          </if>
        <if test="rho != null ">
            `rho`,
          </if>
        <if test="inc != null ">
            `inc`,
          </if>
        <if test="pdc_max != null ">
            `pdc_max`,
          </if>
        <if test="vdc_max != null ">
            `vdc_max`,
          </if>
        <if test="vdc_rate != null">
            `vdc_rate`,
          </if>
        <if test="vac_rate != null">
            `vac_rate`,
          </if>
        <if test="idc_max != null">
            `idc_max`,
          </if>
        <if test="iac_rate != null">
            `iac_rate`,
          </if>
        <if test="iac_max != null ">
            `iac_max`,
          </if>
        <if test="pac != null ">
            `pac`,
          </if>
        <if test="eff != null ">
            `eff`,
          </if>
        <if test="p_max != null">
            `p_max`,
          </if>
        <if test="vmp != null ">
            `vmp`,
          </if>
        <if test="imp != null ">
            `imp`,
          </if>
        <if test="voc != null">
            `voc`,
          </if>
        <if test="isc != null">
            `isc`,
          </if>
        <if test="gstc != null">
            `gstc`,
          </if>
        <if test="tstc != null">
            `tstc`,
          </if>
        <if test="gnoct != null">
            `gnoct`,
          </if>
        <if test="tnoct != null">
            `tnoct`,
          </if>
        <if test="cp_max != null ">
            `cp_max`,
          </if>
        <if test="cvoc != null">
            `cvoc`,
          </if>
        <if test="cisc != null ">
            `cisc`,
          </if>
        <if test="ns != null ">
            `ns`,
          </if>
        <if test="sensor_radiation_id != null and sensor_radiation_id != ''">
            `sensor_radiation_id`,
          </if>
        <if test="sensor_temperature_id != null and sensor_temperature_id != ''">
            `sensor_temperature_id`,
          </if>
        <if test="sim_no != null and sim_no != ''">
            `sim_no`,
          </if>
        <if test="battery_capacity != null and battery_capacity != ''">
            `battery_capacity`,
          </if>
        <if test="work_date != null and work_date != ''">
            `work_date`,
          </if>
        <if test="reference_device_id != null and reference_device_id != ''">
            `reference_device_id`,
          </if>
        <if test="uid != null and uid != ''">
            `uid`,
          </if>
        <if test="db_id != null ">
            `db_id`,
          </if>
        <if test="description != null and description != ''">
            `description`,
          </if>
        <if test="fuelTypeId != null and fuelTypeId != '' "> 
          `fuel_type_id`,
        </if>
        <if test="fuelFormId != null and fuelFormId != '' ">
            `fuel_form_id`,
        </if>
          <if test="pdm != null and pdm != '' ">
            `pdm`,
        </if>
        `create_date`,
          `update_date`
          )
      VALUES (
        <if test="customerId != null and customerId != '' "> 
          #{customerId},
          </if>
        <if test="projectId != null and projectId != '' "> 
          #{projectId},
          </if>
        <if test="systemTypeId != null and systemTypeId != '' "> 
          #{systemTypeId},
          </if>
        <if test="superManagerId != null and superManagerId != '' "> 
          #{superManagerId},
          </if>
        <if test="managerId != null and managerId != '' "> 
          #{managerId},
          </if>
        <if test="areaId != null and areaId != '' "> 
          #{areaId},
          </if>
        <if test="address != null and address != '' "> 
          #{address},
          </if>
        <if test="latitude != null and latitude != '' ">
          #{latitude},
          </if>
        <if test="longitude != null and longitude != '' "> 
          #{longitude},
          </if>
        <if test="deviceName != null and deviceName != '' ">
          #{deviceName},
          </if>
        <if test="deviceTypeId != null and deviceTypeId != '' "> 
          #{deviceTypeId},
          </if>
        <if test="objectId != null and objectId != '' "> 
          #{objectId},
          </if>
        <if test="deviceCode != null and deviceCode != '' ">
          #{deviceCode}, 
        </if>
        <if test="priority_flag != null and priority_flag != ''">
            #{priority_flag},
          </if>
        <if test="location != null and location != ''">
            #{location},
          </if>
           <if test="load_type_id != null and load_type_id != ''">
            #{load_type_id},
          </if>
        <if test="manufacturer != null and manufacturer != ''">
            #{manufacturer},
          </if>
        <if test="model != null and model != ''">
            #{model},
          </if>
        <if test="pn != null and pn != ''">
            #{pn},
          </if>
        <if test="`in` != null">
            #{in},
          </if>
        <if test="vsc != null and vsc != ''">
            #{vsc},
          </if>
        <if test="vpr != null and vpr != ''">
            #{vpr},
          </if>
        <if test="f != null and f != ''">
            #{f},
          </if>
        <if test="delta_p0 != null and delta_p0 != ''">
            #{delta_p0},
          </if>
        <if test="delta_pk != null and delta_pk != ''">
            #{delta_pk},
          </if>
        <if test="i0 != null and i0 != ''">
            #{i0},
          </if>
        <if test="un != null and un != ''">
            #{un},
          </if>
        <if test="m_oil != null and m_oil != ''">
            #{m_oil},
          </if>
        <if test="m_all != null and m_all != ''">
            #{m_all},
          </if>
        <if test="exp_oil != null and exp_oil != ''">
            #{exp_oil},
          </if>
        <if test="exp_wind != null and exp_wind != ''">
            #{exp_wind},
          </if>
        <if test="hot_spot_factor != null and hot_spot_factor != ''">
            #{hot_spot_factor},
          </if>
        <if test="loss_ratio != null and loss_ratio != ''">
            #{loss_ratio},
          </if>
        <if test="const_k11 != null and const_k11 != ''">
            #{const_k11},
          </if>
        <if test="const_k21 != null and const_k21 != ''">
            #{const_k21},
          </if>
        <if test="const_k22 != null and const_k22 != ''">
            #{const_k22},
          </if>
        <if test="hot_spot_temp != null and hot_spot_temp != ''">
           #{hot_spot_temp},
          </if>
        <if test="hot_spot_gradient != null and hot_spot_gradient != ''">
            #{hot_spot_gradient},
          </if>
        <if test="avg_oil_temp_rise != null and avg_oil_temp_rise != ''">
            #{avg_oil_temp_rise},
          </if>
        <if test="top_oil_temp_rise != null and top_oil_temp_rise != ''">
            #{top_oil_temp_rise},
          </if>
        <if test="bottom_oil_temp_rise != null and bottom_oil_temp_rise != ''">
            #{bottom_oil_temp_rise},
          </if>
        <if test="const_time_oil != null and const_time_oil != ''">
            #{const_time_oil},
          </if>
        <if test="const_time_winding != null and const_time_winding != ''">
            #{const_time_winding},
          </if>
        <if test="vn != null and vn != ''">
            #{vn},
          </if>
        <if test="cable_length != null and cable_length != ''">
            #{cable_length},
          </if>
        <if test="rho != null and rho != ''">
            #{rho},
          </if>
        <if test="inc != null and inc != ''">
            #{inc},
          </if>
        <if test="pdc_max != null and pdc_max != ''">
            #{pdc_max},
          </if>
        <if test="vdc_max != null and vdc_max != ''">
            #{vdc_max},
          </if>
        <if test="vdc_rate != null and vdc_rate != ''">
            #{vdc_rate},
          </if>
        <if test="vac_rate != null and vac_rate != ''">
            #{vac_rate},
          </if>
        <if test="idc_max != null and idc_max != ''">
            #{idc_max},
          </if>
        <if test="iac_rate != null and iac_rate != ''">
            #{iac_rate},
          </if>
        <if test="iac_max != null and iac_max != ''">
            #{iac_max},
          </if>
        <if test="pac != null and pac != ''">
            #{pac},
          </if>
        <if test="eff != null and eff != ''">
            #{eff},
          </if>
        <if test="p_max != null and p_max != ''">
            #{p_max},
          </if>
        <if test="vmp != null and vmp != ''">
            #{vmp},
          </if>
        <if test="imp != null and imp != ''">
            #{imp},
          </if>
        <if test="voc != null and voc != ''">
            #{voc},
          </if>
        <if test="isc != null and isc != ''">
            #{isc},
          </if>
        <if test="gstc != null and gstc != ''">
            #{gstc},
          </if>
        <if test="tstc != null and tstc != ''">
            #{tstc},
          </if>
        <if test="gnoct != null and gnoct != ''">
            #{gnoct},
          </if>
        <if test="tnoct != null and tnoct != ''">
            #{tnoct},
          </if>
        <if test="cp_max != null and cp_max != ''">
            #{cp_max},
          </if>
        <if test="cvoc != null and cvoc != ''">
            #{cvoc},
          </if>
        <if test="cisc != null and cisc != ''">
            #{cisc},
          </if>
        <if test="ns != null and ns != ''">
            #{ns},
          </if>
        <if test="sensor_radiation_id != null and sensor_radiation_id != ''">
            #{sensor_radiation_id},
          </if>
        <if test="sensor_temperature_id != null and sensor_temperature_id != ''">
            #{sensor_temperature_id},
          </if>
        <if test="sim_no != null and sim_no != ''">
            #{sim_no},
          </if>
        <if test="battery_capacity != null and battery_capacity != ''">
            #{battery_capacity},
          </if>
        <if test="work_date != null and work_date != ''">
            #{work_date},
          </if>
        <if test="reference_device_id != null and reference_device_id != ''">
            #{reference_device_id},
          </if>
        <if test="uid != null and uid != ''">
            #{uid},
          </if>
        <if test="db_id != null and db_id != ''">
            #{db_id},
          </if>
        <if test="description != null and description != ''">
            #{description},
          </if>
        <if test="fuelTypeId != null and fuelTypeId != '' "> 
          #{fuelTypeId},
        </if>
        <if test="fuelFormId != null and fuelFormId != '' ">
            #{fuelFormId},
        </if>
         <if test="pdm != null and pdm != '' ">
            #{pdm},
        </if>
        NOW(),
            NOW())
    </insert>

    <delete id="deleteDevice" parameterType="map">
        Update s3m_device
        SET delete_flag = 1
        WHERE
        <if test="deviceId != null">
              device_id = #{deviceId}
        </if>
        <if test="projectId != null">
              project_id = #{projectId}
        </if>
    </delete>

    <select id="getDeviceByManagerId" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.device_code AS deviceCode,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
			LEFT JOIN s3m_area C ON B.area_id = C.area_id
            LEFT JOIN s3m_manager D ON C.manager_id = D.manager_id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        <if test="managerId != null">
              AND D.manager_id = #{managerId}
        </if>
        <if test="systemtypeId != null">
              AND F.system_type_id = #{systemtypeId}
        </if>
        <if test="deviceType != null">
              AND A.device_type = #{deviceType}
        </if>
        GROUP BY
        	A.device_id;
    </select>

    <select id="getDeviceByManagerIds" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.device_code AS deviceCode,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
			LEFT JOIN s3m_area C ON B.area_id = C.area_id
            LEFT JOIN s3m_manager D ON C.manager_id = D.manager_id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        <if test="managerIds != null">
            AND D.manager_id IN
            <foreach item="managerIds" collection="managerIds" open="(" separator="," close=")">
           			 	#{managerIds}
    			</foreach>
        </if>
        GROUP BY
        	A.device_id;
    </select>

    <select id="getDeviceByAreaId" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.device_code AS deviceCode,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
			LEFT JOIN s3m_area C ON B.area_id = C.area_id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        <if test="areaId != null">
              AND C.area_id = #{areaId}
        </if>
        <if test="systemtypeId != null">
              AND F.system_type_id = #{systemtypeId}
        </if>
        <if test="deviceType != null">
              AND A.device_type = #{deviceType}
        </if>
        GROUP BY
        	A.device_id;
    </select>

    <select id="getDeviceByAreaIds" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.device_code AS deviceCode,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
			LEFT JOIN s3m_area C ON B.area_id = C.area_id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        <if test="areaIds != null">
            AND C.area_id IN
            <foreach item="areaIds" collection="areaIds" open="(" separator="," close=")">
           			 	#{areaIds}
    			</foreach>
        </if>
        GROUP BY
        	A.device_id;
    </select>

    <select id="getDevicesByProjectIdAndSystemTypeId" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.system_type_id AS systemTypeId,
    		A.device_type AS deviceType,
    		A.device_name AS deviceName,
    		A.address AS addRess,
    		A.device_code AS deviceCode,
    		A.power AS power,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower
    	FROM s3m_device A
        WHERE
        	A.device_id IS NOT NULL
        <if test="projectId != null">
              AND A.project_id = #{projectId}
            </if>
        <if test="systemTypeId != null">
              AND A.system_type_id = #{systemTypeId}
            </if>
        AND A.delete_flag != 1
    </select>

    <select id="getDevicePowerByProjectId" parameterType="map" resultMap="dataDeviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.system_map_id AS systemMapId,
    		A.project_id AS projectId,
    		A.device_code AS deviceCode
        FROM
            s3m_device A
        WHERE
            A.device_id IS NOT NULL
        <if test="projectId != null">
              AND A.project_id = #{projectId}
            </if>
        <if test="keyword != null">
                AND A.device_name LIKE '%${keyword}%'
            </if>
        AND A.system_type_id = 1
            AND A.delete_flag != 1
    </select>

    <select id="getDeviceByProjectId" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.address AS addRess,
    		A.device_code AS deviceCode,
    		A.pn AS power,
    		A.pac AS acPower,
    		A.pdc_max AS dcPower,
    		A.object_id AS objectTypeId
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        	AND A.object_id IS NOT NULL
        <if test="projectId != null">
				AND B.project_id = #{projectId}
			</if>
        <if test="deviceType != null">
				AND A.device_type_id = #{deviceType}
		</if>
        <if test="systemType != null">
                AND A.system_type_id = #{systemType}
        </if>
        <if test="calculateFlag != null">
                AND A.calculate_flag = #{calculateFlag}
        </if>
        <if test="deleteFlag != null">
                AND A.delete_flag = #{deleteFlag}
        </if>
         <if test="fuelFormId != null">
                AND A.fuel_form_id = #{fuelFormId}
        </if>
        GROUP BY
        	A.device_id;
    </select>

    <select id="getDeviceByProjectIds" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.address AS addRess,
    		A.device_code AS deviceCode,
    		A.power AS power,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        <if test="projectIds != null">
            AND B.project_id IN
            <foreach item="projectIds" collection="projectIds" open="(" separator="," close=")">
           			 	#{projectIds}
    			</foreach>
        </if>
        GROUP BY
        	A.device_id;
    </select>
    <select id="getDevicePowerByProjectIdPV" parameterType="map" resultMap="dataDeviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_map_id AS systemMapId,
            A.project_id AS projectId,
            A.device_code AS deviceCode,
            A.dc_power AS dcPower,
            A.ac_power AS acPower
        FROM
            s3m_device A
        WHERE
            A.device_id IS NOT NULL
        <if test="projectId != null">
              AND A.project_id = #{projectId}
            </if>
        <if test="keyword != null">
                AND A.device_name LIKE '%${keyword}%'
            </if>
        AND
            A.system_type_id = 2
        AND
            A.delete_flag = 0
    </select>

    <select id="getDeviceBySuperManagerId" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.device_code AS deviceCode,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
			LEFT JOIN s3m_area C ON B.area_id = C.area_id
            LEFT JOIN s3m_manager D ON C.manager_id = D.manager_id
            LEFT JOIN s3m_super_manager E ON D.super_manager_id = E.id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        <if test="superManagerId != null">
              AND E.id = #{superManagerId}
        </if>
        <if test="systemtypeId != null">
              AND F.system_type_id = #{systemtypeId}
        </if>
        <if test="deviceType != null">
              AND A.device_type = #{deviceType}
        </if>
        GROUP BY
        	A.device_id;
    </select>

    <select id="getDeviceBySuperManagerIds" parameterType="map" resultMap="deviceListResult">
        SELECT
    		A.device_id AS deviceId,
    		A.device_name AS deviceName,
    		A.device_code AS deviceCode,
    		A.ac_power AS acPower,
    		A.dc_power AS dcPower,
    		E.id AS superManagerId
    	FROM s3m_device A
    		LEFT JOIN s3m_project B ON A.project_id = B.project_id
			LEFT JOIN s3m_area C ON B.area_id = C.area_id
            LEFT JOIN s3m_manager D ON C.manager_id = D.manager_id
            LEFT JOIN s3m_super_manager E ON D.super_manager_id = E.id
            LEFT JOIN s3m_system_map F ON A.system_map_id = F.system_map_id
        WHERE
        	A.device_id IS NOT NULL
        <if test="superManagerId != null">
            AND E.id IN
            <foreach item="superManagerId" collection="superManagerIds" open="(" separator="," close=")">
           			 	#{superManagerId}
        			</foreach>
        </if>
        <if test="systemtypeId != null">
	              AND F.system_type_id = #{systemtypeId}
	        </if>
        GROUP BY
        	A.device_id;
    </select>

    <insert id="insertDevice">
	    INSERT
		INTO s3m_device (device_code, device_name, sim_no, power, voltage, cable_id_a1, cable_id_a2, cable_id_a3, cable_id_a4, cable_id_a5, cable_id_a6, cable_id_a7, cable_id_a8, cable_id_a9)
	         values (
	         #{device.deviceCode},
	         #{device.tagName},
	         #{device.simNo},
	         #{device.power},
	         #{device.voltage},
	         #{device.cableA1},
	         #{device.cableA2},
	         #{device.cableA3},
	         #{device.cableA4},
	         #{device.cableA5},
	         #{device.cableA6},
	         #{device.cableA7},
	         #{device.cableA8},
	         #{device.cableA9})
	 </insert>

    <select id="getDeviceList" resultMap="deviceResult">
	    SELECT
	    	*
	    FROM s3m_device
	 </select>

    <select id="getListDeviceByCondition" resultMap="deviceResult">
        SELECT
            *
        FROM s3m_device
     </select>

    <select id="getDevicesEmpty" resultMap="deviceResult">
        SELECT
	    	*
	    FROM s3m_device
	    WHERE
	    	system_map_id IS NULL
	    	AND delete_flag = 0
        <if test="projectId != null">
	    		AND project_id = #{projectId}
	    	</if>
        <if test="deviceType != null">
	    		AND device_type = #{deviceType}
	    	</if>
        <if test="systemTypeId != null">
	    		AND system_type_id = #{systemTypeId}
	    	</if>

    </select>

    <select id="getDevicesAlReady" resultMap="deviceResult">
        SELECT
	    	*
	    FROM 
	       s3m_plus.s3m_device
	    WHERE
	    	system_map_id IS NOT NULL
	    	AND delete_flag = 0
        <if test="projectId != null">
    		AND project_id = #{projectId}
    	</if>
        <if test="deviceType != null">
    		AND device_type = #{deviceType}
    	</if>
        <if test="systemTypeId != null">
    		AND system_type_id = #{systemTypeId}
    	</if>
    </select>

    <update id="updateDeviceTool">
        UPDATE
            s3m_device
        SET
        <if test="device.deviceCode != null">
                device_code = #{device.deviceCode},
            </if>
        system_map_id = #{device.systemMapId},
            update_date = NOW()
        WHERE
            device_id = #{device.deviceId}
    </update>

    <update id="setDeviceEmpty">
        UPDATE
            s3m_device
        SET
            system_map_id = null
        WHERE
            system_map_id = #{systemMapId}
     </update>

    <select id="getCountDevice" parameterType="map" resultType="java.lang.Integer">
         SELECT
            COUNT(A.device_id)
        FROM s3m_device A
            JOIN s3m_project B ON A.project_id = B.project_id
            JOIN s3m_area C ON B.area_id = C.area_id
            JOIN s3m_manager D ON C.manager_id = D.manager_id
            JOIN s3m_super_manager E ON D.super_manager_id = E.id
        WHERE
            B.customer_id = ${customerId}
            AND C.area_id = ${areaId}
            AND D.manager_id = ${managerId}
            AND E.id = ${superManagerId}
            AND B.project_id= ${projectId}
     </select>

    <select id="getDeviceByDeviceId" parameterType="map" resultMap="dataDeviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_code AS deviceCode,
            A.device_name AS deviceName,
            A.device_type_id AS deviceType,
            A.customer_id AS customerId,
            A.project_id AS projectId,
            C.project_name AS projectName,
            A.system_map_id AS systemMapId,
            A.system_type_id AS systemTypeId,
            A.system_type_id AS systemTypeId,
            D.name AS deviceTypeName,
            B.customer_name AS customerName,
            C.project_name AS projectName,
            A.address,
            A.latitude,
            A.longitude,
            A.sim_no AS simNo,
            A.pn AS power,
            A.p_max as pMax,
            A.pac as acPower,
            A.pdc_max as dcPower,
            A.in AS imccb,
            A.model,
            A.Vn AS voltage,
            A.db_id AS dbId,
            A.description,
            A.priority_flag
        FROM
            s3m_device A
            LEFT JOIN s3m_project C ON A.project_id = C.project_id
            LEFT JOIN s3m_customer B ON C.customer_id = B.customer_id
            LEFT JOIN s3m_device_type_mst D ON D.id = A.device_type_id
        WHERE
            A.device_id IS NOT NULL
        <if test="deviceId != null">
                AND A.device_id = #{deviceId}
            </if>
    </select>

    <select id="getPowerByDeviceId" resultMap="weatherResult">
        SELECT
            A.radiation,
            A.temperature
        FROM
            s3m_data_weather_1 A
        WHERE
            A.device_id IS NOT NULL
        <if test="deviceId != null">
                AND A.device_id = #{deviceId}
            </if>
        ORDER BY sent_date DESC
            LIMIT 1
    </select>

    <select id="getInverterByDeviceId" resultMap="inverterListResult">
        SELECT
            *
        FROM
            s3m_data_inverter_1 A
        WHERE
            A.device_id IS NOT NULL
        <if test="deviceId != null">
                AND A.device_id = #{deviceId}
            </if>
        ORDER BY sent_date DESC
            LIMIT 1
    </select>

    <update id="setDeviceCaculator">
        UPDATE 
        	s3m_device
        SET
        	calculate_flag = 1
    	WHERE 
    		device_id IN
        <foreach item="deviceId" collection="deviceIds" open="(" separator="," close=")">
             #{deviceId}
        </foreach>
    </update>

    <update id="removeDeviceCaculator">
        UPDATE 
        	s3m_device
        SET
        	calculate_flag = 0
    	WHERE 
    		system_map_id = #{systemMapId}
        <if test="deviceIds != null">
            AND device_id NOT IN
            <foreach item="deviceId" collection="deviceIds" open="(" separator="," close=")">
             		#{deviceId}
        		</foreach>
        </if>
    </update>

    <select id="getDeviceIdByProjectId" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id
        FROM
            s3m_device A
        WHERE
            A.project_id = #{projectId}
        AND
            A.calculate_flag =1
    </select>

    <select id="getDataByProjectId" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.system_type_id
        FROM
            s3m_device A
        WHERE
            A.project_id = #{projectId}
        AND
            A.calculate_flag =1
        AND A.delete_flag =0;
    </select>

    <select id="getDeviceIdByCustomerId" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id AS deviceId
        FROM
            s3m_device A
        WHERE
            <if test="projectId == null">
                A.customer_id =#{customerId}
            </if>
            <if test="projectId != null">
                A.project_id = #{projectId}
            </if>
         AND A.delete_flag =0;    
    </select>

    <select id="getDeviceBySuperManager" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id AS deviceId
        FROM
            s3m_device A
        JOIN 
            s3m_project B ON A.project_id = B.project_id 
        JOIN
            s3m_project C ON B.project_id = C.project_id
        JOIN
            s3m_area D ON C.area_id = D.area_id
        JOIN
            s3m_manager E ON D.manager_id = E.manager_id
        WHERE
            B.customer_id =#{customerId}
            AND
            E.super_manager_id =#{superManagerId}
        AND
            A.calculate_flag =1
    </select>

    <select id="getDeviceByManager" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id AS deviceId
        FROM
            s3m_device A
        JOIN 
            s3m_project B ON A.project_id = B.project_id 
        JOIN
            s3m_project C ON B.project_id = C.project_id
        JOIN
            s3m_area D ON C.area_id = D.area_id
        JOIN
            s3m_manager E ON D.manager_id = E.manager_id
        WHERE
            B.customer_id =#{customerId}
        AND
            E.super_manager_id =#{superManagerId}
        AND
            D.manager_id = #{managerId}
        AND
            A.calculate_flag =1
    </select>

    <select id="getDeviceByArea" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id AS deviceId
        FROM
            s3m_device A
        JOIN 
            s3m_project B ON A.project_id = B.project_id 
        JOIN
            s3m_project C ON B.project_id = C.project_id
        JOIN
            s3m_area D ON C.area_id = D.area_id
        JOIN
            s3m_manager E ON D.manager_id = E.manager_id
        WHERE
            B.customer_id =#{customerId}
        AND
            E.super_manager_id =#{superManagerId}
        AND
            D.manager_id = #{managerId}
        AND
            C.area_id =#{areaId}
        AND
            A.calculate_flag =1
    </select>

    <select id="getAllDeviceByCalculate" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id AS deviceId
        FROM
            s3m_device A
        WHERE
            A.calculate_flag =1
    </select>


    <select id="getCountDeviceBySystemType" parameterType="map" resultType="java.lang.Integer">
        SELECT
            COUNT(A.device_id)
        FROM s3m_device A
        JOIN s3m_project B ON A.project_id = B.project_id
        WHERE
            B.project_id= ${projectId}
            AND A.system_type_id= ${systemTypeId}
            AND A.delete_flag =0
    </select>

    <select id="getDeviceIdByProjectIdAndSystemTypeId" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id
        FROM
            s3m_device A
        WHERE
            A.project_id = #{projectId}
        AND
            A.system_type_id= #{systemTypeId}
        AND
            A.calculate_flag =1
    </select>

    <select id="getDevicePowerByProjectIdGrid" parameterType="map" resultMap="dataDeviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_map_id AS systemMapId,
            A.project_id AS projectId,
            A.device_code AS deviceCode,
            A.dc_power AS dcPower,
            A.ac_power AS acPower
        FROM
            s3m_device A
        WHERE
            A.device_id IS NOT NULL
        <if test="projectId != null">
              AND A.project_id = #{projectId}
            </if>
        <if test="keyword != null">
                AND A.device_name LIKE '%${keyword}%'
            </if>
        AND
           A.system_type_id = 5
        AND
           A.delete_flag = 0
    </select>

    <update id="removeDeviceCaculatorEmpty">
        UPDATE 
        	s3m_device
        SET
        	calculate_flag = 0
    	WHERE 
    		system_map_id IS NULL
    </update>

    <select id="getDeviceIdBySystemType" parameterType="map" resultType="java.lang.String">
        SELECT
            A.device_id AS deviceId
        FROM
            s3m_device A
        WHERE
            A.system_type_id= #{systemTypeId}
        AND
            A.delete_flag =0
    </select>

    <select id="getDeviceIdBySystemMap" parameterType="map" resultType="java.lang.String">
        SELECT 
            A.device_id AS deviceId
        FROM 
            s3m_device A 
        JOIN 
            s3m_system_map B 
        ON 
            A.system_map_id = B.system_map_id 
        WHERE 
            B.layer =1 
            AND A.calculate_flag =1 
            AND A.system_type_id = #{systemTypeId} 
            AND A.delete_flag =0;
    </select>

    <select id="getListObjectCustomerId" parameterType="map" resultMap="objectListResult">
        SELECT
            A.object_type_id AS objectTypeId,
            A.object_type_name AS objectTypeName,
            A.system_type_id AS systemTypeId
        FROM
            s3m_object_type_mst A
        WHERE
            A.customer_id = #{customerId}
    </select>

    <select id="getDeviceByObjectTypeId" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type_id AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.name AS objectTypeName,
            D.name AS objectName,
            E.customer_name AS customerName,
            F.name AS deviceTypeName,
            A.location 
        FROM
            s3m_device A      
        JOIN s3m_object C ON A.object_id  = C.id
        JOIN s3m_project B ON B.project_id = C.project_id
        JOIN s3m_object_type_mst D ON D.id = C.object_type_id 
        JOIN s3m_customer E ON B.customer_id = E.customer_id
        JOIN s3m_device_type_mst F ON A.device_type_id = F.id
        WHERE
            A.object_id = #{objectTypeId}
        <if test="customerId != null">
                AND A.customer_id = #{customerId}
            </if>
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if> 
        <if test="systemTypeId != 0 and systemTypeId != null">
           AND A.system_type_id = #{systemTypeId}
        </if> 
        <if test="projectIds != null">
           AND A.project_id IN (${projectIds}) 
        </if>
        AND A.delete_flag = 0
    </select>

    <select id="getListObjectProjectId" parameterType="map" resultMap="objectListResult">
        SELECT
            A.object_type_id AS objectTypeId,
            A.object_type_name AS objectTypeName,
            A.system_type_id AS systemTypeId
        FROM
            s3m_object_type_mst A
        JOIN
            s3m_project B ON A.customer_id = B.customer_id
        WHERE
            B.project_id = #{projectId}    
    </select>

    <select id="getListObjectByCusSys" parameterType="map" resultMap="objectListResult">
        SELECT
            A.object_type_id AS objectTypeId,
            A.object_type_name AS objectTypeName,
            A.system_type_id AS systemTypeId
        FROM
            s3m_object_type_mst A
        WHERE
            A.customer_id = #{customerId}
            AND A.system_type_id = #{systemTypeId}
    </select>

    <select id="getListObjectByProSys" parameterType="map" resultMap="objectListResult">
        SELECT
            A.object_type_id AS objectTypeId,
            A.object_type_name AS objectTypeName,
            A.system_type_id AS systemTypeId
        FROM
            s3m_object_type_mst A
        JOIN
            s3m_project B ON A.customer_id = B.customer_id
        WHERE
            B.project_id = #{projectId} 
            AND A.system_type_id = #{systemTypeId}
    </select>

    <select id="getDataDeviceLoadByObjectType" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.p_total AS pTotal,
            C.q_total AS qTotal,
            C.ia AS ia,
            C.ib AS ib,
            C.ic AS ic,
            C.pfa AS pfa,
            C.pfa AS pfb,
            C.pfa AS pfc,
            C.uab AS uab,
            C.ubc,
            C.uca,
            C.uan,
            C.ubn,
            C.ucn,
            C.pa,
            C.pb,
            C.pc,
            C.qa,
            C.qb,
            C.qc,
            C.sa,
            C.sb,
            C.sc,
            C.ep,
            C.f,
            D.type_class AS typeClass
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_instant_data C ON A.device_id = C.device_id
        JOIN s3m_object_type_mst D ON A.object_type_id = D.object_type_id 
        WHERE
            A.object_type_id = #{objectTypeId}
            AND A.device_id = #{deviceId}
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
    </select>

    <select id="getDataDeviceInverterByObjectType" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.p_total AS pTotal,
            C.ia AS ia,
            C.ib AS ib,
            C.ic AS ic,
            C.pfa AS pfa,
            C.uab AS uab,
            C.ubc,
            C.uca,
            C.uan,
            C.ubn,
            C.ucn,
            C.pa,
            C.pb,
            C.pc,
            C.Udc,
            C.Idc,
            C.Pdc,
            C.Epdc
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_instant_data C ON A.device_id = C.device_id
        WHERE
            A.object_type_id = #{objectTypeId}
            AND A.device_id = #{deviceId}
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
            AND A.calculate_flag = 1
    </select>

    <select id="getDataDeviceCombinerByObjectType" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.PdcCombiner AS PdcCombiner,
            C.IdcCombiner AS IdcCombiner,
            C.VdcCombiner AS VdcStr,
            C.EpCombiner AS ep
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_instant_data C ON A.device_id = C.device_id
        WHERE
            A.object_type_id = #{objectTypeId}
            AND A.device_id = #{deviceId}
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
            AND A.calculate_flag = 1
    </select>

    <select id="getDataDeviceStringByObjectType" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.PdcStr AS PdcStr,
            C.IdcStr AS IdcStr,
            C.VdcStr AS VdcStr,
            C.EpStr AS ep,
            C.Tstr AS t,
            C.H as h
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_instant_data C ON A.device_id = C.device_id
        WHERE
            A.object_type_id = #{objectTypeId}
            AND A.device_id = #{deviceId}
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
            AND A.calculate_flag = 1
    </select>

    <select id="getDataDeviceRMUTwoLevelByObjectName" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName
          
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
       
        WHERE
            A.object_type_id = #{objectTypeId}
            AND B.customer_id = #{customerId}
            AND A.object_name = #{objectTypeName}
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
    </select>

    <select id="getDataDeviceMeterTwoLevelByObjectName" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        WHERE
            A.object_type_id = #{objectTypeId}
            AND B.customer_id = #{customerId}
            AND A.object_name = #{objectTypeName}
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
    </select>

    <select id="getDataInstance" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_status AS status
        FROM
            ${schema}s3m_instant_data A
        WHERE
            A.device_id = #{deviceId}
        <if test="day == null and month == null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}   
            </if>
        <if test="day != null">
                AND A.sent_date LIKE "${day}%"
            </if>
        <if test="month != null">
                AND A.sent_date LIKE "${month}%"
            </if>
    </select>

    <select id="sumPower" parameterType="map" resultType="java.lang.Float">
        SELECT
            SUM(CASE
                WHEN
                    A.pn IS NOT NULL
                THEN A.pn ELSE 0 END)
        FROM
            s3m_device A
        LEFT JOIN s3m_project B ON B.project_id = A.project_id
        LEFT JOIN s3m_system_type C ON C.system_type_id = A.system_type_id
        WHERE
                A.system_type_id = #{systemTypeId}
        <if test="customerId != null">
                AND B.customer_id = #{customerId}
            </if>
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceId != null">
             AND A.device_id IN (${deviceId})
             </if>
    </select>
    <select id="getInfoDevice" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.description,
            A.create_date AS createDate,
            A.device_type_id,
            A.system_type_id,
            A.device_name,
            A.in,
            C.img,
            D.project_name AS projectName
        FROM
            s3m_device A
            JOIN s3m_object B ON A.object_id = B.id
            JOIN s3m_object_type_mst C ON C.id = B.object_type_id
            JOIN s3m_project D ON A.project_id = D.project_id
        WHERE
            A.device_id = #{deviceId}
            AND A.customer_id = #{customerId}        
    </select>

    <select id="getDataInstanceDeviceLoad" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type_id AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            D.p_total AS pTotal,
            D.ia AS ia,
            D.ib AS ib,
            D.ic AS ic,
            D.pfa AS pfa,
            D.pfb AS pfb,
            D.pfc AS pfc,
            D.uab AS uab,
            D.ubc,
            D.uca,
            D.uan,
            D.ubn,
            D.ucn,
            D.pa,
            D.pb,
            D.pc,
            D.ep,
            D.qa,
            D.qb,
            D.qc,
            D.q_total AS qTotal,
            D.sa,
            D.sb,
            D.sc,
            D.s_total AS sTotal,
            D.t1,
            D.t2,
            D.t3,
            D.f,
            D.thd_van AS thdVan,
            D.thd_vbn AS thdVbn,
            D.thd_vcn AS thdVcn,
            D.thd_ia AS thdIa,
            D.thd_ib AS thdIb,
            D.thd_ic AS thdIc,
            D.sent_date AS sendDate
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_data_meter_1_${year} D ON A.device_id = D.device_id
        WHERE
            A.device_id = #{deviceId}
            AND A.delete_flag = 0
        <if test="fromDate != null">
                AND D.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
            ORDER BY D.sent_date DESC
            LIMIT 1
    </select>

    <select id="getDataInstanceInverter" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_name,
            A.device_type_id,
            A.system_type_id,
            B.project_name AS projectName,
            C.p_total AS pTotal,
            C.ia,
            C.ib,
            C.ic,
            C.pfa AS pfa,
            C.pfb AS pfb,
            C.pfc AS pfc,
            C.uab AS uab,
            C.ubc,
            C.uca,
            C.va AS uan,
            C.vb AS ubn,
            C.vc AS ucn,
            C.pa,
            C.pb,
            C.pc,
            C.Udc,
            C.Idc,
            C.Pdc,
            D.ep,
            C.qa,
            C.qb,
            C.qc,
            C.q_total AS qTotal,
            C.Epdc AS epdc,
            C.s_total AS sTotal,
            C.t1,
            C.t2,
            C.t3,
            C.f,
            C.thd_van AS thdVan,
            C.thd_vbn AS thdVbn,
            C.thd_vcn AS thdVcn,
            C.thd_ia AS thdIa,
            C.thd_ib AS thdIb,
            C.thd_ic AS thdIc,
            C.device_status AS status,
            C.sent_date AS sendDate,
            A.location
         FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_instant_data C ON A.device_id = C.device_id
        JOIN ${schema}s3m_data_inverter_1_${year} D ON A.device_id = D.device_id
        WHERE
            A.device_id = #{deviceId}
            AND A.delete_flag = 0
            AND C.sent_date = D.sent_date
        <if test="fromDate != null">
                AND C.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
    </select>

    <select id="getDataInstanceDeviceCombiner" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type_id AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.PdcCombiner AS PdcCombiner,
            C.IdcCombiner AS IdcCombiner,
            C.VdcCombiner AS VdcCombiner,
            C.t,
            D.EpCombiner AS ep,
            C.sent_date AS sendDate
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_data_combiner_1_${year} D ON A.device_id = D.device_id
        WHERE
            A.device_id = #{deviceId}
            AND A.delete_flag = 0
            AND C.sent_date = D.sent_date
        <if test="fromDate != null">
                AND C.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
    </select>

    <select id="getDataInstanceDeviceString" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type_id AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.PdcStr AS PdcStr,
            C.IdcStr AS IdcStr,
            C.VdcStr AS VdcStr,
            C.EpStr AS ep,
            C.Tstr AS t,
            C.H as h,
            C.sent_date AS sendDate
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_instant_data C ON A.device_id = C.device_id
        JOIN ${schema}s3m_data_string_1_${year} D ON A.device_id = D.device_id
        WHERE
            A.device_id = #{deviceId}
            AND A.delete_flag = 0
            AND C.sent_date = D.sent_date
        <if test="fromDate != null">
                AND C.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
    </select>

    <select id="getDataInstanceDeviceRMU" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type_id AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName,
            C.t,
            C.h,
            C.uab,
            C.ubc,
            C.uca,
            C.uan,
            C.ubn,
            C.ucn,
            C.pa,
            C.pb,
            C.pc,
            C.p_total AS pTotal,
            C.pfa AS pfa,
            C.pfb AS pfb,
            C.pfc AS pfc,
            C.ia,
            C.ib,
            C.ic,
            D.ep,
            C.qa,
            C.qb,
            C.qc,
            C.q_total AS qTotal,
            C.s_total AS sTotal,
            C.thd_van AS thdVan,
            C.thd_vbn AS thdVbn,
            C.thd_vcn AS thdVcn,
            C.thd_ia AS thdIa,
            C.thd_ib AS thdIb,
            C.thd_ic AS thdIc,
            C.Indicator,
            C.LFB_RATIO AS lfbRatio,
            C.LFB_EPPC AS lfbEppc,
            C.MFB_RATIO AS mfbRatio,
            C.MLFB_EPPC AS mfbEppc,
            C.HLFB_RATIO AS hlfbRatio,
            C.HLFB_EPPC AS hlfbEppc,
            C.SAW_ID1 AS sawId1,
            C.SAW_ID2 AS sawId2,
            C.SAW_ID3 AS sawId3,
            C.SAW_ID4 AS sawId4,
            C.SAW_ID5 AS sawId5,
            C.SAW_ID6 AS sawId6,
            C.sent_date AS sendDate
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_instant_data C ON A.device_id = C.device_id
        JOIN ${schema}s3m_data_rmu_drawer_1_${year} D ON A.device_id = D.device_id
        WHERE
            A.device_id = #{deviceId}
            AND A.delete_flag = 0
            AND C.sent_date = D.sent_date
        <if test="fromDate != null">
                AND C.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
    </select>

    <select id="getListDataInstanceLoad" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
    SET @interval_mins = #{minute};
        SELECT
            COALESCE (A.uab,0) AS uab,
            COALESCE (A.ubc,0) AS ubc,
            COALESCE (A.uca,0) AS uca,
            COALESCE (A.uan, 0) AS uan,
            COALESCE (A.ubn, 0) AS ubn,
            COALESCE (A.ucn, 0) AS ucn,
            COALESCE (A.ia, 0) AS ia,
            COALESCE (A.ib, 0) AS ib,
            COALESCE (A.ic, 0) AS ic,
            COALESCE (A.iavg, 0) AS iavg,
            COALESCE (A.pa, 0) AS pa,
            COALESCE (A.pb, 0) AS pb,
            COALESCE (A.pc, 0) AS pc,
            COALESCE (A.qa, 0) AS qa,
            COALESCE (A.qb, 0) AS qb,
            COALESCE (A.qc, 0) AS qc,
            COALESCE (A.p_total, 0) AS pTotal,
            COALESCE (A.pfa, 0) AS pfa,
            COALESCE (A.pfb, 0) AS pfb,
            COALESCE (A.pfc, 0) AS pfc,
            COALESCE (A.thd_vab, 0) AS thdVab,
            COALESCE (A.thd_vbc, 0) AS thdVbc,
            COALESCE (A.thd_vca, 0) AS thdVca,
            COALESCE (A.thd_van, 0) AS thdVan,
            COALESCE (A.thd_vbn, 0) AS thdVbn,
            COALESCE (A.thd_vcn, 0) AS thdVcn,
            COALESCE (A.thd_ia, 0) AS thdIa,
            COALESCE (A.thd_ib, 0) AS thdIb,
            COALESCE (A.thd_ic, 0) AS thdIc,
            COALESCE (A.f, 0) AS f,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, A.sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_meter_1_${year} A
        WHERE
            A.device_id = #{deviceId}
        <if test="toDate == null">
            AND A.sent_date like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>

  <select id="getListDataInstanceLoadFrame2" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
    SET @interval_mins = #{minute};
        SELECT
	        CASE WHEN B.ia_h1 IS NULL OR B.ia_h1 <![CDATA[<]]> 0 OR B.ia_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h1, 0) END AS iaH1,
		    CASE WHEN B.ia_h2 IS NULL OR B.ia_h2 <![CDATA[<]]> 0 OR B.ia_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h2, 0) END AS iaH2,
		    CASE WHEN B.ia_h3 IS NULL OR B.ia_h3 <![CDATA[<]]> 0 OR B.ia_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h3, 0) END AS iaH3,
		    CASE WHEN B.ia_h4 IS NULL OR B.ia_h4 <![CDATA[<]]> 0 OR B.ia_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h4, 0) END AS iaH4,
		    CASE WHEN B.ia_h5 IS NULL OR B.ia_h5 <![CDATA[<]]> 0 OR B.ia_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h5, 0) END AS iaH5,
		    CASE WHEN B.ia_h6 IS NULL OR B.ia_h6 <![CDATA[<]]> 0 OR B.ia_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h6, 0) END AS iaH6,
		    CASE WHEN B.ia_h7 IS NULL OR B.ia_h7 <![CDATA[<]]> 0 OR B.ia_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h7, 0) END AS iaH7,
		    CASE WHEN B.ia_h8 IS NULL OR B.ia_h8 <![CDATA[<]]> 0 OR B.ia_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h8, 0) END AS iaH8,
		    CASE WHEN B.ia_h9 IS NULL OR B.ia_h9 <![CDATA[<]]> 0 OR B.ia_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h9, 0) END AS iaH9,
		    CASE WHEN B.ia_h10 IS NULL OR B.ia_h10 <![CDATA[<]]> 0 OR B.ia_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h10, 0) END AS iaH10,
		    CASE WHEN B.ia_h11 IS NULL OR B.ia_h11 <![CDATA[<]]> 0 OR B.ia_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h11, 0) END AS iaH11,
		    CASE WHEN B.ia_h12 IS NULL OR B.ia_h12 <![CDATA[<]]> 0 OR B.ia_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h12, 0) END AS iaH12,
		    CASE WHEN B.ia_h13 IS NULL OR B.ia_h13 <![CDATA[<]]> 0 OR B.ia_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h13, 0) END AS iaH13,
		    CASE WHEN B.ia_h14 IS NULL OR B.ia_h14 <![CDATA[<]]> 0 OR B.ia_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h14, 0) END AS iaH14,
		    CASE WHEN B.ia_h15 IS NULL OR B.ia_h15 <![CDATA[<]]> 0 OR B.ia_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h15, 0) END AS iaH15,
		    CASE WHEN B.ia_h16 IS NULL OR B.ia_h16 <![CDATA[<]]> 0 OR B.ia_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h16, 0) END AS iaH16,
		    CASE WHEN B.ia_h17 IS NULL OR B.ia_h17 <![CDATA[<]]> 0 OR B.ia_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h17, 0) END AS iaH17,
		    CASE WHEN B.ia_h18 IS NULL OR B.ia_h18 <![CDATA[<]]> 0 OR B.ia_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h18, 0) END AS iaH18,
		    CASE WHEN B.ia_h19 IS NULL OR B.ia_h19 <![CDATA[<]]> 0 OR B.ia_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h19, 0) END AS iaH19,
		    CASE WHEN B.ia_h20 IS NULL OR B.ia_h20 <![CDATA[<]]> 0 OR B.ia_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h20, 0) END AS iaH20,
		    CASE WHEN B.ia_h21 IS NULL OR B.ia_h21 <![CDATA[<]]> 0 OR B.ia_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h21, 0) END AS iaH21,
		    CASE WHEN B.ia_h22 IS NULL OR B.ia_h22 <![CDATA[<]]> 0 OR B.ia_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h22, 0) END AS iaH22,
		    CASE WHEN B.ia_h23 IS NULL OR B.ia_h23 <![CDATA[<]]> 0 OR B.ia_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h23, 0) END AS iaH23,
		    CASE WHEN B.ia_h24 IS NULL OR B.ia_h24 <![CDATA[<]]> 0 OR B.ia_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h24, 0) END AS iaH24,
		    CASE WHEN B.ia_h25 IS NULL OR B.ia_h25 <![CDATA[<]]> 0 OR B.ia_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h25, 0) END AS iaH25,
		    CASE WHEN B.ia_h26 IS NULL OR B.ia_h26 <![CDATA[<]]> 0 OR B.ia_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h26, 0) END AS iaH26,
		    CASE WHEN B.ia_h27 IS NULL OR B.ia_h27 <![CDATA[<]]> 0 OR B.ia_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h27, 0) END AS iaH27,
		    CASE WHEN B.ia_h28 IS NULL OR B.ia_h28 <![CDATA[<]]> 0 OR B.ia_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h28, 0) END AS iaH28,
		    CASE WHEN B.ia_h29 IS NULL OR B.ia_h29 <![CDATA[<]]> 0 OR B.ia_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h29, 0) END AS iaH29,
		    CASE WHEN B.ia_h30 IS NULL OR B.ia_h30 <![CDATA[<]]> 0 OR B.ia_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h30, 0) END AS iaH30,
		    CASE WHEN B.ia_h31 IS NULL OR B.ia_h31 <![CDATA[<]]> 0 OR B.ia_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ia_h31, 0) END AS iaH31,
			CASE WHEN B.ib_h1 IS NULL OR B.ib_h1 <![CDATA[<]]> 0 OR B.ib_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h1, 0) END AS ibH1,
		    CASE WHEN B.ib_h2 IS NULL OR B.ib_h2 <![CDATA[<]]> 0 OR B.ib_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h2, 0) END AS ibH2,
		    CASE WHEN B.ib_h3 IS NULL OR B.ib_h3 <![CDATA[<]]> 0 OR B.ib_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h3, 0) END AS ibH3,
		    CASE WHEN B.ib_h4 IS NULL OR B.ib_h4 <![CDATA[<]]> 0 OR B.ib_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h4, 0) END AS ibH4,
		    CASE WHEN B.ib_h5 IS NULL OR B.ib_h5 <![CDATA[<]]> 0 OR B.ib_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h5, 0) END AS ibH5,
		    CASE WHEN B.ib_h6 IS NULL OR B.ib_h6 <![CDATA[<]]> 0 OR B.ib_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h6, 0) END AS ibH6,
		    CASE WHEN B.ib_h7 IS NULL OR B.ib_h7 <![CDATA[<]]> 0 OR B.ib_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h7, 0) END AS ibH7,
		    CASE WHEN B.ib_h8 IS NULL OR B.ib_h8 <![CDATA[<]]> 0 OR B.ib_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h8, 0) END AS ibH8,
		    CASE WHEN B.ib_h9 IS NULL OR B.ib_h9 <![CDATA[<]]> 0 OR B.ib_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h9, 0) END AS ibH9,
		    CASE WHEN B.ib_h10 IS NULL OR B.ib_h10 <![CDATA[<]]> 0 OR B.ib_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h10, 0) END AS ibH10,
		    CASE WHEN B.ib_h11 IS NULL OR B.ib_h11 <![CDATA[<]]> 0 OR B.ib_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h11, 0) END AS ibH11,
		    CASE WHEN B.ib_h12 IS NULL OR B.ib_h12 <![CDATA[<]]> 0 OR B.ib_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h12, 0) END AS ibH12,
		    CASE WHEN B.ib_h13 IS NULL OR B.ib_h13 <![CDATA[<]]> 0 OR B.ib_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h13, 0) END AS ibH13,
		    CASE WHEN B.ib_h14 IS NULL OR B.ib_h14 <![CDATA[<]]> 0 OR B.ib_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h14, 0) END AS ibH14,
		    CASE WHEN B.ib_h15 IS NULL OR B.ib_h15 <![CDATA[<]]> 0 OR B.ib_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h15, 0) END AS ibH15,
		    CASE WHEN B.ib_h16 IS NULL OR B.ib_h16 <![CDATA[<]]> 0 OR B.ib_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h16, 0) END AS ibH16,
		    CASE WHEN B.ib_h17 IS NULL OR B.ib_h17 <![CDATA[<]]> 0 OR B.ib_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h17, 0) END AS ibH17,
		    CASE WHEN B.ib_h18 IS NULL OR B.ib_h18 <![CDATA[<]]> 0 OR B.ib_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h18, 0) END AS ibH18,
		    CASE WHEN B.ib_h19 IS NULL OR B.ib_h19 <![CDATA[<]]> 0 OR B.ib_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h19, 0) END AS ibH19,
		    CASE WHEN B.ib_h20 IS NULL OR B.ib_h20 <![CDATA[<]]> 0 OR B.ib_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h20, 0) END AS ibH20,
		    CASE WHEN B.ib_h21 IS NULL OR B.ib_h21 <![CDATA[<]]> 0 OR B.ib_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h21, 0) END AS ibH21,
		    CASE WHEN B.ib_h22 IS NULL OR B.ib_h22 <![CDATA[<]]> 0 OR B.ib_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h22, 0) END AS ibH22,
		    CASE WHEN B.ib_h23 IS NULL OR B.ib_h23 <![CDATA[<]]> 0 OR B.ib_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h23, 0) END AS ibH23,
		    CASE WHEN B.ib_h24 IS NULL OR B.ib_h24 <![CDATA[<]]> 0 OR B.ib_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h24, 0) END AS ibH24,
		    CASE WHEN B.ib_h25 IS NULL OR B.ib_h25 <![CDATA[<]]> 0 OR B.ib_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h25, 0) END AS ibH25,
		    CASE WHEN B.ib_h26 IS NULL OR B.ib_h26 <![CDATA[<]]> 0 OR B.ib_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h26, 0) END AS ibH26,
		    CASE WHEN B.ib_h27 IS NULL OR B.ib_h27 <![CDATA[<]]> 0 OR B.ib_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h27, 0) END AS ibH27,
		    CASE WHEN B.ib_h28 IS NULL OR B.ib_h28 <![CDATA[<]]> 0 OR B.ib_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h28, 0) END AS ibH28,
		    CASE WHEN B.ib_h29 IS NULL OR B.ib_h29 <![CDATA[<]]> 0 OR B.ib_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h29, 0) END AS ibH29,
		    CASE WHEN B.ib_h30 IS NULL OR B.ib_h30 <![CDATA[<]]> 0 OR B.ib_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h30, 0) END AS ibH30,
		    CASE WHEN B.ib_h31 IS NULL OR B.ib_h31 <![CDATA[<]]> 0 OR B.ib_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ib_h31, 0) END AS ibH31,			
		    CASE WHEN B.ic_h1 IS NULL OR B.ic_h1 <![CDATA[<]]> 0 OR B.ic_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h1, 0) END AS icH1,
		    CASE WHEN B.ic_h2 IS NULL OR B.ic_h2 <![CDATA[<]]> 0 OR B.ic_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h2, 0) END AS icH2,
		    CASE WHEN B.ic_h3 IS NULL OR B.ic_h3 <![CDATA[<]]> 0 OR B.ic_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h3, 0) END AS icH3,
		    CASE WHEN B.ic_h4 IS NULL OR B.ic_h4 <![CDATA[<]]> 0 OR B.ic_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h4, 0) END AS icH4,
		    CASE WHEN B.ic_h5 IS NULL OR B.ic_h5 <![CDATA[<]]> 0 OR B.ic_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h5, 0) END AS icH5,
		    CASE WHEN B.ic_h6 IS NULL OR B.ic_h6 <![CDATA[<]]> 0 OR B.ic_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h6, 0) END AS icH6,
		    CASE WHEN B.ic_h7 IS NULL OR B.ic_h7 <![CDATA[<]]> 0 OR B.ic_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h7, 0) END AS icH7,
		    CASE WHEN B.ic_h8 IS NULL OR B.ic_h8 <![CDATA[<]]> 0 OR B.ic_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h8, 0) END AS icH8,
		    CASE WHEN B.ic_h9 IS NULL OR B.ic_h9 <![CDATA[<]]> 0 OR B.ic_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h9, 0) END AS icH9,
		    CASE WHEN B.ic_h10 IS NULL OR B.ic_h10 <![CDATA[<]]> 0 OR B.ic_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h10, 0) END AS icH10,
		    CASE WHEN B.ic_h11 IS NULL OR B.ic_h11 <![CDATA[<]]> 0 OR B.ic_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h11, 0) END AS icH11,
		    CASE WHEN B.ic_h12 IS NULL OR B.ic_h12 <![CDATA[<]]> 0 OR B.ic_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h12, 0) END AS icH12,
		    CASE WHEN B.ic_h13 IS NULL OR B.ic_h13 <![CDATA[<]]> 0 OR B.ic_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h13, 0) END AS icH13,
		    CASE WHEN B.ic_h14 IS NULL OR B.ic_h14 <![CDATA[<]]> 0 OR B.ic_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h14, 0) END AS icH14,
		    CASE WHEN B.ic_h15 IS NULL OR B.ic_h15 <![CDATA[<]]> 0 OR B.ic_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h15, 0) END AS icH15,
		    CASE WHEN B.ic_h16 IS NULL OR B.ic_h16 <![CDATA[<]]> 0 OR B.ic_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h16, 0) END AS icH16,
		    CASE WHEN B.ic_h17 IS NULL OR B.ic_h17 <![CDATA[<]]> 0 OR B.ic_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h17, 0) END AS icH17,
		    CASE WHEN B.ic_h18 IS NULL OR B.ic_h18 <![CDATA[<]]> 0 OR B.ic_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h18, 0) END AS icH18,
		    CASE WHEN B.ic_h19 IS NULL OR B.ic_h19 <![CDATA[<]]> 0 OR B.ic_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h19, 0) END AS icH19,
		    CASE WHEN B.ic_h20 IS NULL OR B.ic_h20 <![CDATA[<]]> 0 OR B.ic_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h20, 0) END AS icH20,
		    CASE WHEN B.ic_h21 IS NULL OR B.ic_h21 <![CDATA[<]]> 0 OR B.ic_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h21, 0) END AS icH21,
		    CASE WHEN B.ic_h22 IS NULL OR B.ic_h22 <![CDATA[<]]> 0 OR B.ic_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h22, 0) END AS icH22,
		    CASE WHEN B.ic_h23 IS NULL OR B.ic_h23 <![CDATA[<]]> 0 OR B.ic_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h23, 0) END AS icH23,
		    CASE WHEN B.ic_h24 IS NULL OR B.ic_h24 <![CDATA[<]]> 0 OR B.ic_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h24, 0) END AS icH24,
		    CASE WHEN B.ic_h25 IS NULL OR B.ic_h25 <![CDATA[<]]> 0 OR B.ic_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h25, 0) END AS icH25,
		    CASE WHEN B.ic_h26 IS NULL OR B.ic_h26 <![CDATA[<]]> 0 OR B.ic_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h26, 0) END AS icH26,
		    CASE WHEN B.ic_h27 IS NULL OR B.ic_h27 <![CDATA[<]]> 0 OR B.ic_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h27, 0) END AS icH27,
		    CASE WHEN B.ic_h28 IS NULL OR B.ic_h28 <![CDATA[<]]> 0 OR B.ic_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h28, 0) END AS icH28,
		    CASE WHEN B.ic_h29 IS NULL OR B.ic_h29 <![CDATA[<]]> 0 OR B.ic_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h29, 0) END AS icH29,
		    CASE WHEN B.ic_h30 IS NULL OR B.ic_h30 <![CDATA[<]]> 0 OR B.ic_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h30, 0) END AS icH30,
		    CASE WHEN B.ic_h31 IS NULL OR B.ic_h31 <![CDATA[<]]> 0 OR B.ic_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.ic_h31, 0) END AS icH31,	     	
		    CASE WHEN B.vab_h1 IS NULL OR B.vab_h1 <![CDATA[<]]> 0 OR B.vab_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h1, 0) END AS vAbH1,
		    CASE WHEN B.vab_h2 IS NULL OR B.vab_h2 <![CDATA[<]]> 0 OR B.vab_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h2, 0) END AS vAbH2,
		    CASE WHEN B.vab_h3 IS NULL OR B.vab_h3 <![CDATA[<]]> 0 OR B.vab_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h3, 0) END AS vAbH3,
		    CASE WHEN B.vab_h4 IS NULL OR B.vab_h4 <![CDATA[<]]> 0 OR B.vab_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h4, 0) END AS vAbH4,
		    CASE WHEN B.vab_h5 IS NULL OR B.vab_h5 <![CDATA[<]]> 0 OR B.vab_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h5, 0) END AS vAbH5,
		    CASE WHEN B.vab_h6 IS NULL OR B.vab_h6 <![CDATA[<]]> 0 OR B.vab_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h6, 0) END AS vAbH6,
		    CASE WHEN B.vab_h7 IS NULL OR B.vab_h7 <![CDATA[<]]> 0 OR B.vab_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h7, 0) END AS vAbH7,
		    CASE WHEN B.vab_h8 IS NULL OR B.vab_h8 <![CDATA[<]]> 0 OR B.vab_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h8, 0) END AS vAbH8,
		    CASE WHEN B.vab_h9 IS NULL OR B.vab_h9 <![CDATA[<]]> 0 OR B.vab_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h9, 0) END AS vAbH9,
		    CASE WHEN B.vab_h10 IS NULL OR B.vab_h10 <![CDATA[<]]> 0 OR B.vab_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h10, 0) END AS vAbH10,
		    CASE WHEN B.vab_h11 IS NULL OR B.vab_h11 <![CDATA[<]]> 0 OR B.vab_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h11, 0) END AS vAbH11,
		    CASE WHEN B.vab_h12 IS NULL OR B.vab_h12 <![CDATA[<]]> 0 OR B.vab_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h12, 0) END AS vAbH12,
		    CASE WHEN B.vab_h13 IS NULL OR B.vab_h13 <![CDATA[<]]> 0 OR B.vab_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h13, 0) END AS vAbH13,
		    CASE WHEN B.vab_h14 IS NULL OR B.vab_h14 <![CDATA[<]]> 0 OR B.vab_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h14, 0) END AS vAbH14,
		    CASE WHEN B.vab_h15 IS NULL OR B.vab_h15 <![CDATA[<]]> 0 OR B.vab_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h15, 0) END AS vAbH15,
		    CASE WHEN B.vab_h16 IS NULL OR B.vab_h16 <![CDATA[<]]> 0 OR B.vab_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h16, 0) END AS vAbH16,
		    CASE WHEN B.vab_h17 IS NULL OR B.vab_h17 <![CDATA[<]]> 0 OR B.vab_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h17, 0) END AS vAbH17,
		    CASE WHEN B.vab_h18 IS NULL OR B.vab_h18 <![CDATA[<]]> 0 OR B.vab_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h18, 0) END AS vAbH18,
		    CASE WHEN B.vab_h19 IS NULL OR B.vab_h19 <![CDATA[<]]> 0 OR B.vab_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h19, 0) END AS vAbH19,
		    CASE WHEN B.vab_h20 IS NULL OR B.vab_h20 <![CDATA[<]]> 0 OR B.vab_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h20, 0) END AS vAbH20,
		    CASE WHEN B.vab_h21 IS NULL OR B.vab_h21 <![CDATA[<]]> 0 OR B.vab_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h21, 0) END AS vAbH21,
		    CASE WHEN B.vab_h22 IS NULL OR B.vab_h22 <![CDATA[<]]> 0 OR B.vab_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h22, 0) END AS vAbH22,
		    CASE WHEN B.vab_h23 IS NULL OR B.vab_h23 <![CDATA[<]]> 0 OR B.vab_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h23, 0) END AS vAbH23,
		    CASE WHEN B.vab_h24 IS NULL OR B.vab_h24 <![CDATA[<]]> 0 OR B.vab_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h24, 0) END AS vAbH24,
		    CASE WHEN B.vab_h25 IS NULL OR B.vab_h25 <![CDATA[<]]> 0 OR B.vab_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h25, 0) END AS vAbH25,
		    CASE WHEN B.vab_h26 IS NULL OR B.vab_h26 <![CDATA[<]]> 0 OR B.vab_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h26, 0) END AS vAbH26,
		    CASE WHEN B.vab_h27 IS NULL OR B.vab_h27 <![CDATA[<]]> 0 OR B.vab_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h27, 0) END AS vAbH27,
		    CASE WHEN B.vab_h28 IS NULL OR B.vab_h28 <![CDATA[<]]> 0 OR B.vab_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h28, 0) END AS vAbH28,
		    CASE WHEN B.vab_h29 IS NULL OR B.vab_h29 <![CDATA[<]]> 0 OR B.vab_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h29, 0) END AS vAbH29,
		    CASE WHEN B.vab_h30 IS NULL OR B.vab_h30 <![CDATA[<]]> 0 OR B.vab_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h30, 0) END AS vAbH30,
		    CASE WHEN B.vab_h31 IS NULL OR B.vab_h31 <![CDATA[<]]> 0 OR B.vab_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vab_h31, 0) END AS vAbH31,		
		    CASE WHEN B.vbc_h1 IS NULL OR B.vbc_h1 <![CDATA[<]]> 0 OR B.vbc_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h1, 0) END AS vBcH1,
		    CASE WHEN B.vbc_h2 IS NULL OR B.vbc_h2 <![CDATA[<]]> 0 OR B.vbc_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h2, 0) END AS vBcH2,
		    CASE WHEN B.vbc_h3 IS NULL OR B.vbc_h3 <![CDATA[<]]> 0 OR B.vbc_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h3, 0) END AS vBcH3,
		    CASE WHEN B.vbc_h4 IS NULL OR B.vbc_h4 <![CDATA[<]]> 0 OR B.vbc_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h4, 0) END AS vBcH4,
		    CASE WHEN B.vbc_h5 IS NULL OR B.vbc_h5 <![CDATA[<]]> 0 OR B.vbc_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h5, 0) END AS vBcH5,
		    CASE WHEN B.vbc_h6 IS NULL OR B.vbc_h6 <![CDATA[<]]> 0 OR B.vbc_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h6, 0) END AS vBcH6,
		    CASE WHEN B.vbc_h7 IS NULL OR B.vbc_h7 <![CDATA[<]]> 0 OR B.vbc_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h7, 0) END AS vBcH7,
		    CASE WHEN B.vbc_h8 IS NULL OR B.vbc_h8 <![CDATA[<]]> 0 OR B.vbc_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h8, 0) END AS vBcH8,
		    CASE WHEN B.vbc_h9 IS NULL OR B.vbc_h9 <![CDATA[<]]> 0 OR B.vbc_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h9, 0) END AS vBcH9,
		    CASE WHEN B.vbc_h10 IS NULL OR B.vbc_h10 <![CDATA[<]]> 0 OR B.vbc_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h10, 0) END AS vBcH10,
		    CASE WHEN B.vbc_h11 IS NULL OR B.vbc_h11 <![CDATA[<]]> 0 OR B.vbc_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h11, 0) END AS vBcH11,
		    CASE WHEN B.vbc_h12 IS NULL OR B.vbc_h12 <![CDATA[<]]> 0 OR B.vbc_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h12, 0) END AS vBcH12,
		    CASE WHEN B.vbc_h13 IS NULL OR B.vbc_h13 <![CDATA[<]]> 0 OR B.vbc_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h13, 0) END AS vBcH13,
		    CASE WHEN B.vbc_h14 IS NULL OR B.vbc_h14 <![CDATA[<]]> 0 OR B.vbc_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h14, 0) END AS vBcH14,
		    CASE WHEN B.vbc_h15 IS NULL OR B.vbc_h15 <![CDATA[<]]> 0 OR B.vbc_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h15, 0) END AS vBcH15,
		    CASE WHEN B.vbc_h16 IS NULL OR B.vbc_h16 <![CDATA[<]]> 0 OR B.vbc_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h16, 0) END AS vBcH16,
		    CASE WHEN B.vbc_h17 IS NULL OR B.vbc_h17 <![CDATA[<]]> 0 OR B.vbc_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h17, 0) END AS vBcH17,
		    CASE WHEN B.vbc_h18 IS NULL OR B.vbc_h18 <![CDATA[<]]> 0 OR B.vbc_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h18, 0) END AS vBcH18,
		    CASE WHEN B.vbc_h19 IS NULL OR B.vbc_h19 <![CDATA[<]]> 0 OR B.vbc_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h19, 0) END AS vBcH19,
		    CASE WHEN B.vbc_h20 IS NULL OR B.vbc_h20 <![CDATA[<]]> 0 OR B.vbc_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h20, 0) END AS vBcH20,
		    CASE WHEN B.vbc_h21 IS NULL OR B.vbc_h21 <![CDATA[<]]> 0 OR B.vbc_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h21, 0) END AS vBcH21,
		    CASE WHEN B.vbc_h22 IS NULL OR B.vbc_h22 <![CDATA[<]]> 0 OR B.vbc_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h22, 0) END AS vBcH22,
		    CASE WHEN B.vbc_h23 IS NULL OR B.vbc_h23 <![CDATA[<]]> 0 OR B.vbc_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h23, 0) END AS vBcH23,
		    CASE WHEN B.vbc_h24 IS NULL OR B.vbc_h24 <![CDATA[<]]> 0 OR B.vbc_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h24, 0) END AS vBcH24,
		    CASE WHEN B.vbc_h25 IS NULL OR B.vbc_h25 <![CDATA[<]]> 0 OR B.vbc_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h25, 0) END AS vBcH25,
		    CASE WHEN B.vbc_h26 IS NULL OR B.vbc_h26 <![CDATA[<]]> 0 OR B.vbc_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h26, 0) END AS vBcH26,
		    CASE WHEN B.vbc_h27 IS NULL OR B.vbc_h27 <![CDATA[<]]> 0 OR B.vbc_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h27, 0) END AS vBcH27,
		    CASE WHEN B.vbc_h28 IS NULL OR B.vbc_h28 <![CDATA[<]]> 0 OR B.vbc_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h28, 0) END AS vBcH28,
		    CASE WHEN B.vbc_h29 IS NULL OR B.vbc_h29 <![CDATA[<]]> 0 OR B.vbc_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h29, 0) END AS vBcH29,
		    CASE WHEN B.vbc_h30 IS NULL OR B.vbc_h30 <![CDATA[<]]> 0 OR B.vbc_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h30, 0) END AS vBcH30,
		    CASE WHEN B.vbc_h31 IS NULL OR B.vbc_h31 <![CDATA[<]]> 0 OR B.vbc_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbc_h31, 0) END AS vBcH31,    			
		    CASE WHEN B.vca_h1 IS NULL OR B.vca_h1 <![CDATA[<]]> 0 OR B.vca_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h1, 0) END AS vCaH1,
		    CASE WHEN B.vca_h2 IS NULL OR B.vca_h2 <![CDATA[<]]> 0 OR B.vca_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h2, 0) END AS vCaH2,
		    CASE WHEN B.vca_h3 IS NULL OR B.vca_h3 <![CDATA[<]]> 0 OR B.vca_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h3, 0) END AS vCaH3,
		    CASE WHEN B.vca_h4 IS NULL OR B.vca_h4 <![CDATA[<]]> 0 OR B.vca_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h4, 0) END AS vCaH4,
		    CASE WHEN B.vca_h5 IS NULL OR B.vca_h5 <![CDATA[<]]> 0 OR B.vca_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h5, 0) END AS vCaH5,
		    CASE WHEN B.vca_h6 IS NULL OR B.vca_h6 <![CDATA[<]]> 0 OR B.vca_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h6, 0) END AS vCaH6,
		    CASE WHEN B.vca_h7 IS NULL OR B.vca_h7 <![CDATA[<]]> 0 OR B.vca_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h7, 0) END AS vCaH7,
		    CASE WHEN B.vca_h8 IS NULL OR B.vca_h8 <![CDATA[<]]> 0 OR B.vca_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h8, 0) END AS vCaH8,
		    CASE WHEN B.vca_h9 IS NULL OR B.vca_h9 <![CDATA[<]]> 0 OR B.vca_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h9, 0) END AS vCaH9,
		    CASE WHEN B.vca_h10 IS NULL OR B.vca_h10 <![CDATA[<]]> 0 OR B.vca_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h10, 0) END AS vCaH10,
		    CASE WHEN B.vca_h11 IS NULL OR B.vca_h11 <![CDATA[<]]> 0 OR B.vca_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h11, 0) END AS vCaH11,
		    CASE WHEN B.vca_h12 IS NULL OR B.vca_h12 <![CDATA[<]]> 0 OR B.vca_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h12, 0) END AS vCaH12,
		    CASE WHEN B.vca_h13 IS NULL OR B.vca_h13 <![CDATA[<]]> 0 OR B.vca_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h13, 0) END AS vCaH13,
		    CASE WHEN B.vca_h14 IS NULL OR B.vca_h14 <![CDATA[<]]> 0 OR B.vca_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h14, 0) END AS vCaH14,
		    CASE WHEN B.vca_h15 IS NULL OR B.vca_h15 <![CDATA[<]]> 0 OR B.vca_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h15, 0) END AS vCaH15,
		    CASE WHEN B.vca_h16 IS NULL OR B.vca_h16 <![CDATA[<]]> 0 OR B.vca_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h16, 0) END AS vCaH16,
		    CASE WHEN B.vca_h17 IS NULL OR B.vca_h17 <![CDATA[<]]> 0 OR B.vca_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h17, 0) END AS vCaH17,
		    CASE WHEN B.vca_h18 IS NULL OR B.vca_h18 <![CDATA[<]]> 0 OR B.vca_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h18, 0) END AS vCaH18,
		    CASE WHEN B.vca_h19 IS NULL OR B.vca_h19 <![CDATA[<]]> 0 OR B.vca_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h19, 0) END AS vCaH19,
		    CASE WHEN B.vca_h20 IS NULL OR B.vca_h20 <![CDATA[<]]> 0 OR B.vca_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h20, 0) END AS vCaH20,
		    CASE WHEN B.vca_h21 IS NULL OR B.vca_h21 <![CDATA[<]]> 0 OR B.vca_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h21, 0) END AS vCaH21,
		    CASE WHEN B.vca_h22 IS NULL OR B.vca_h22 <![CDATA[<]]> 0 OR B.vca_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h22, 0) END AS vCaH22,
		    CASE WHEN B.vca_h23 IS NULL OR B.vca_h23 <![CDATA[<]]> 0 OR B.vca_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h23, 0) END AS vCaH23,
		    CASE WHEN B.vca_h24 IS NULL OR B.vca_h24 <![CDATA[<]]> 0 OR B.vca_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h24, 0) END AS vCaH24,
		    CASE WHEN B.vca_h25 IS NULL OR B.vca_h25 <![CDATA[<]]> 0 OR B.vca_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h25, 0) END AS vCaH25,
		    CASE WHEN B.vca_h26 IS NULL OR B.vca_h26 <![CDATA[<]]> 0 OR B.vca_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h26, 0) END AS vCaH26,
		    CASE WHEN B.vca_h27 IS NULL OR B.vca_h27 <![CDATA[<]]> 0 OR B.vca_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h27, 0) END AS vCaH27,
		    CASE WHEN B.vca_h28 IS NULL OR B.vca_h28 <![CDATA[<]]> 0 OR B.vca_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h28, 0) END AS vCaH28,
		    CASE WHEN B.vca_h29 IS NULL OR B.vca_h29 <![CDATA[<]]> 0 OR B.vca_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h29, 0) END AS vCaH29,
		    CASE WHEN B.vca_h30 IS NULL OR B.vca_h30 <![CDATA[<]]> 0 OR B.vca_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h30, 0) END AS vCaH30,
		    CASE WHEN B.vca_h31 IS NULL OR B.vca_h31 <![CDATA[<]]> 0 OR B.vca_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vca_h31, 0) END AS vCaH31,		
		    CASE WHEN B.van_h1 IS NULL OR B.van_h1 <![CDATA[<]]> 0 OR B.van_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h1, 0) END AS vAnH1,
		    CASE WHEN B.van_h2 IS NULL OR B.van_h2 <![CDATA[<]]> 0 OR B.van_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h2, 0) END AS vAnH2,
		    CASE WHEN B.van_h3 IS NULL OR B.van_h3 <![CDATA[<]]> 0 OR B.van_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h3, 0) END AS vAnH3,
		    CASE WHEN B.van_h4 IS NULL OR B.van_h4 <![CDATA[<]]> 0 OR B.van_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h4, 0) END AS vAnH4,
		    CASE WHEN B.van_h5 IS NULL OR B.van_h5 <![CDATA[<]]> 0 OR B.van_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h5, 0) END AS vAnH5,
		    CASE WHEN B.van_h6 IS NULL OR B.van_h6 <![CDATA[<]]> 0 OR B.van_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h6, 0) END AS vAnH6,
		    CASE WHEN B.van_h7 IS NULL OR B.van_h7 <![CDATA[<]]> 0 OR B.van_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h7, 0) END AS vAnH7,
		    CASE WHEN B.van_h8 IS NULL OR B.van_h8 <![CDATA[<]]> 0 OR B.van_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h8, 0) END AS vAnH8,
		    CASE WHEN B.van_h9 IS NULL OR B.van_h9 <![CDATA[<]]> 0 OR B.van_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h9, 0) END AS vAnH9,
		    CASE WHEN B.van_h10 IS NULL OR B.van_h10 <![CDATA[<]]> 0 OR B.van_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h10, 0) END AS vAnH10,
		    CASE WHEN B.van_h11 IS NULL OR B.van_h11 <![CDATA[<]]> 0 OR B.van_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h11, 0) END AS vAnH11,
		    CASE WHEN B.van_h12 IS NULL OR B.van_h12 <![CDATA[<]]> 0 OR B.van_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h12, 0) END AS vAnH12,
		    CASE WHEN B.van_h13 IS NULL OR B.van_h13 <![CDATA[<]]> 0 OR B.van_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h13, 0) END AS vAnH13,
		    CASE WHEN B.van_h14 IS NULL OR B.van_h14 <![CDATA[<]]> 0 OR B.van_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h14, 0) END AS vAnH14,
		    CASE WHEN B.van_h15 IS NULL OR B.van_h15 <![CDATA[<]]> 0 OR B.van_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h15, 0) END AS vAnH15,
		    CASE WHEN B.van_h16 IS NULL OR B.van_h16 <![CDATA[<]]> 0 OR B.van_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h16, 0) END AS vAnH16,
		    CASE WHEN B.van_h17 IS NULL OR B.van_h17 <![CDATA[<]]> 0 OR B.van_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h17, 0) END AS vAnH17,
		    CASE WHEN B.van_h18 IS NULL OR B.van_h18 <![CDATA[<]]> 0 OR B.van_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h18, 0) END AS vAnH18,
		    CASE WHEN B.van_h19 IS NULL OR B.van_h19 <![CDATA[<]]> 0 OR B.van_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h19, 0) END AS vAnH19,
		    CASE WHEN B.van_h20 IS NULL OR B.van_h20 <![CDATA[<]]> 0 OR B.van_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h20, 0) END AS vAnH20,
		    CASE WHEN B.van_h21 IS NULL OR B.van_h21 <![CDATA[<]]> 0 OR B.van_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h21, 0) END AS vAnH21,
		    CASE WHEN B.van_h22 IS NULL OR B.van_h22 <![CDATA[<]]> 0 OR B.van_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h22, 0) END AS vAnH22,
		    CASE WHEN B.van_h23 IS NULL OR B.van_h23 <![CDATA[<]]> 0 OR B.van_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h23, 0) END AS vAnH23,
		    CASE WHEN B.van_h24 IS NULL OR B.van_h24 <![CDATA[<]]> 0 OR B.van_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h24, 0) END AS vAnH24,
		    CASE WHEN B.van_h25 IS NULL OR B.van_h25 <![CDATA[<]]> 0 OR B.van_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h25, 0) END AS vAnH25,
		    CASE WHEN B.van_h26 IS NULL OR B.van_h26 <![CDATA[<]]> 0 OR B.van_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h26, 0) END AS vAnH26,
		    CASE WHEN B.van_h27 IS NULL OR B.van_h27 <![CDATA[<]]> 0 OR B.van_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h27, 0) END AS vAnH27,
		    CASE WHEN B.van_h28 IS NULL OR B.van_h28 <![CDATA[<]]> 0 OR B.van_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h28, 0) END AS vAnH28,
		    CASE WHEN B.van_h29 IS NULL OR B.van_h29 <![CDATA[<]]> 0 OR B.van_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h29, 0) END AS vAnH29,
		    CASE WHEN B.van_h30 IS NULL OR B.van_h30 <![CDATA[<]]> 0 OR B.van_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h30, 0) END AS vAnH30,
		    CASE WHEN B.van_h31 IS NULL OR B.van_h31 <![CDATA[<]]> 0 OR B.van_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.van_h31, 0) END AS vAnH31,	
		    CASE WHEN B.vbn_h1 IS NULL OR B.vbn_h1 <![CDATA[<]]> 0 OR B.vbn_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h1, 0) END AS vBnH1,
		    CASE WHEN B.vbn_h2 IS NULL OR B.vbn_h2 <![CDATA[<]]> 0 OR B.vbn_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h2, 0) END AS vBnH2,
		    CASE WHEN B.vbn_h3 IS NULL OR B.vbn_h3 <![CDATA[<]]> 0 OR B.vbn_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h3, 0) END AS vBnH3,
		    CASE WHEN B.vbn_h4 IS NULL OR B.vbn_h4 <![CDATA[<]]> 0 OR B.vbn_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h4, 0) END AS vBnH4,
		    CASE WHEN B.vbn_h5 IS NULL OR B.vbn_h5 <![CDATA[<]]> 0 OR B.vbn_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h5, 0) END AS vBnH5,
		    CASE WHEN B.vbn_h6 IS NULL OR B.vbn_h6 <![CDATA[<]]> 0 OR B.vbn_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h6, 0) END AS vBnH6,
		    CASE WHEN B.vbn_h7 IS NULL OR B.vbn_h7 <![CDATA[<]]> 0 OR B.vbn_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h7, 0) END AS vBnH7,
		    CASE WHEN B.vbn_h8 IS NULL OR B.vbn_h8 <![CDATA[<]]> 0 OR B.vbn_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h8, 0) END AS vBnH8,
		    CASE WHEN B.vbn_h9 IS NULL OR B.vbn_h9 <![CDATA[<]]> 0 OR B.vbn_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h9, 0) END AS vBnH9,
		    CASE WHEN B.vbn_h10 IS NULL OR B.vbn_h10 <![CDATA[<]]> 0 OR B.vbn_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h10, 0) END AS vBnH10,
		    CASE WHEN B.vbn_h11 IS NULL OR B.vbn_h11 <![CDATA[<]]> 0 OR B.vbn_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h11, 0) END AS vBnH11,
		    CASE WHEN B.vbn_h12 IS NULL OR B.vbn_h12 <![CDATA[<]]> 0 OR B.vbn_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h12, 0) END AS vBnH12,
		    CASE WHEN B.vbn_h13 IS NULL OR B.vbn_h13 <![CDATA[<]]> 0 OR B.vbn_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h13, 0) END AS vBnH13,
		    CASE WHEN B.vbn_h14 IS NULL OR B.vbn_h14 <![CDATA[<]]> 0 OR B.vbn_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h14, 0) END AS vBnH14,
		    CASE WHEN B.vbn_h15 IS NULL OR B.vbn_h15 <![CDATA[<]]> 0 OR B.vbn_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h15, 0) END AS vBnH15,
		    CASE WHEN B.vbn_h16 IS NULL OR B.vbn_h16 <![CDATA[<]]> 0 OR B.vbn_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h16, 0) END AS vBnH16,
		    CASE WHEN B.vbn_h17 IS NULL OR B.vbn_h17 <![CDATA[<]]> 0 OR B.vbn_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h17, 0) END AS vBnH17,
		    CASE WHEN B.vbn_h18 IS NULL OR B.vbn_h18 <![CDATA[<]]> 0 OR B.vbn_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h18, 0) END AS vBnH18,
		    CASE WHEN B.vbn_h19 IS NULL OR B.vbn_h19 <![CDATA[<]]> 0 OR B.vbn_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h19, 0) END AS vBnH19,
		    CASE WHEN B.vbn_h20 IS NULL OR B.vbn_h20 <![CDATA[<]]> 0 OR B.vbn_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h20, 0) END AS vBnH20,
		    CASE WHEN B.vbn_h21 IS NULL OR B.vbn_h21 <![CDATA[<]]> 0 OR B.vbn_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h21, 0) END AS vBnH21,
		    CASE WHEN B.vbn_h22 IS NULL OR B.vbn_h22 <![CDATA[<]]> 0 OR B.vbn_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h22, 0) END AS vBnH22,
		    CASE WHEN B.vbn_h23 IS NULL OR B.vbn_h23 <![CDATA[<]]> 0 OR B.vbn_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h23, 0) END AS vBnH23,
		    CASE WHEN B.vbn_h24 IS NULL OR B.vbn_h24 <![CDATA[<]]> 0 OR B.vbn_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h24, 0) END AS vBnH24,
		    CASE WHEN B.vbn_h25 IS NULL OR B.vbn_h25 <![CDATA[<]]> 0 OR B.vbn_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h25, 0) END AS vBnH25,
		    CASE WHEN B.vbn_h26 IS NULL OR B.vbn_h26 <![CDATA[<]]> 0 OR B.vbn_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h26, 0) END AS vBnH26,
		    CASE WHEN B.vbn_h27 IS NULL OR B.vbn_h27 <![CDATA[<]]> 0 OR B.vbn_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h27, 0) END AS vBnH27,
		    CASE WHEN B.vbn_h28 IS NULL OR B.vbn_h28 <![CDATA[<]]> 0 OR B.vbn_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h28, 0) END AS vBnH28,
		    CASE WHEN B.vbn_h29 IS NULL OR B.vbn_h29 <![CDATA[<]]> 0 OR B.vbn_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h29, 0) END AS vBnH29,
		    CASE WHEN B.vbn_h30 IS NULL OR B.vbn_h30 <![CDATA[<]]> 0 OR B.vbn_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h30, 0) END AS vBnH30,
		    CASE WHEN B.vbn_h31 IS NULL OR B.vbn_h31 <![CDATA[<]]> 0 OR B.vbn_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vbn_h31, 0) END AS vBnH31,  
		    CASE WHEN B.vcn_h1 IS NULL OR B.vcn_h1 <![CDATA[<]]> 0 OR B.vcn_h1 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h1, 0) END AS vCnH1,
		    CASE WHEN B.vcn_h2 IS NULL OR B.vcn_h2 <![CDATA[<]]> 0 OR B.vcn_h2 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h2, 0) END AS vCnH2,
		    CASE WHEN B.vcn_h3 IS NULL OR B.vcn_h3 <![CDATA[<]]> 0 OR B.vcn_h3 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h3, 0) END AS vCnH3,
		    CASE WHEN B.vcn_h4 IS NULL OR B.vcn_h4 <![CDATA[<]]> 0 OR B.vcn_h4 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h4, 0) END AS vCnH4,
		    CASE WHEN B.vcn_h5 IS NULL OR B.vcn_h5 <![CDATA[<]]> 0 OR B.vcn_h5 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h5, 0) END AS vCnH5,
		    CASE WHEN B.vcn_h6 IS NULL OR B.vcn_h6 <![CDATA[<]]> 0 OR B.vcn_h6 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h6, 0) END AS vCnH6,
		    CASE WHEN B.vcn_h7 IS NULL OR B.vcn_h7 <![CDATA[<]]> 0 OR B.vcn_h7 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h7, 0) END AS vCnH7,
		    CASE WHEN B.vcn_h8 IS NULL OR B.vcn_h8 <![CDATA[<]]> 0 OR B.vcn_h8 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h8, 0) END AS vCnH8,
		    CASE WHEN B.vcn_h9 IS NULL OR B.vcn_h9 <![CDATA[<]]> 0 OR B.vcn_h9 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h9, 0) END AS vCnH9,
		    CASE WHEN B.vcn_h10 IS NULL OR B.vcn_h10 <![CDATA[<]]> 0 OR B.vcn_h10 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h10, 0) END AS vCnH10,
		    CASE WHEN B.vcn_h11 IS NULL OR B.vcn_h11 <![CDATA[<]]> 0 OR B.vcn_h11 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h11, 0) END AS vCnH11,
		    CASE WHEN B.vcn_h12 IS NULL OR B.vcn_h12 <![CDATA[<]]> 0 OR B.vcn_h12 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h12, 0) END AS vCnH12,
		    CASE WHEN B.vcn_h13 IS NULL OR B.vcn_h13 <![CDATA[<]]> 0 OR B.vcn_h13 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h13, 0) END AS vCnH13,
		    CASE WHEN B.vcn_h14 IS NULL OR B.vcn_h14 <![CDATA[<]]> 0 OR B.vcn_h14 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h14, 0) END AS vCnH14,
		    CASE WHEN B.vcn_h15 IS NULL OR B.vcn_h15 <![CDATA[<]]> 0 OR B.vcn_h15 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h15, 0) END AS vCnH15,
		    CASE WHEN B.vcn_h16 IS NULL OR B.vcn_h16 <![CDATA[<]]> 0 OR B.vcn_h16 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h16, 0) END AS vCnH16,
		    CASE WHEN B.vcn_h17 IS NULL OR B.vcn_h17 <![CDATA[<]]> 0 OR B.vcn_h17 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h17, 0) END AS vCnH17,
		    CASE WHEN B.vcn_h18 IS NULL OR B.vcn_h18 <![CDATA[<]]> 0 OR B.vcn_h18 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h18, 0) END AS vCnH18,
		    CASE WHEN B.vcn_h19 IS NULL OR B.vcn_h19 <![CDATA[<]]> 0 OR B.vcn_h19 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h19, 0) END AS vCnH19,
		    CASE WHEN B.vcn_h20 IS NULL OR B.vcn_h20 <![CDATA[<]]> 0 OR B.vcn_h20 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h20, 0) END AS vCnH20,
		    CASE WHEN B.vcn_h21 IS NULL OR B.vcn_h21 <![CDATA[<]]> 0 OR B.vcn_h21 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h21, 0) END AS vCnH21,
		    CASE WHEN B.vcn_h22 IS NULL OR B.vcn_h22 <![CDATA[<]]> 0 OR B.vcn_h22 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h22, 0) END AS vCnH22,
		    CASE WHEN B.vcn_h23 IS NULL OR B.vcn_h23 <![CDATA[<]]> 0 OR B.vcn_h23 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h23, 0) END AS vCnH23,
		    CASE WHEN B.vcn_h24 IS NULL OR B.vcn_h24 <![CDATA[<]]> 0 OR B.vcn_h24 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h24, 0) END AS vCnH24,
		    CASE WHEN B.vcn_h25 IS NULL OR B.vcn_h25 <![CDATA[<]]> 0 OR B.vcn_h25 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h25, 0) END AS vCnH25,
		    CASE WHEN B.vcn_h26 IS NULL OR B.vcn_h26 <![CDATA[<]]> 0 OR B.vcn_h26 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h26, 0) END AS vCnH26,
		    CASE WHEN B.vcn_h27 IS NULL OR B.vcn_h27 <![CDATA[<]]> 0 OR B.vcn_h27 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h27, 0) END AS vCnH27,
		    CASE WHEN B.vcn_h28 IS NULL OR B.vcn_h28 <![CDATA[<]]> 0 OR B.vcn_h28 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h28, 0) END AS vCnH28,
		    CASE WHEN B.vcn_h29 IS NULL OR B.vcn_h29 <![CDATA[<]]> 0 OR B.vcn_h29 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h29, 0) END AS vCnH29,
		    CASE WHEN B.vcn_h30 IS NULL OR B.vcn_h30 <![CDATA[<]]> 0 OR B.vcn_h30 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h30, 0) END AS vCnH30,
		    CASE WHEN B.vcn_h31 IS NULL OR B.vcn_h31 <![CDATA[<]]> 0 OR B.vcn_h31 <![CDATA[>]]> 200 THEN 0 ELSE COALESCE(B.vcn_h31, 0) END AS vCnH31,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, B.sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_meter_2_${year} B
        WHERE
            B.device_id = #{deviceId}
        <if test="toDate == null">
            AND B.sent_date like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND B.sent_date BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>
    
     <select id="getListDataInstanceLoadHumidity" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
    SET @interval_mins = #{minute};
        SELECT
            A.t,
            A.h,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, A.sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_temp_humidity_1_${year} A
        WHERE
            A.device_id = #{deviceId}
        <if test="toDate == null">
            AND A.sent_date like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>
    
     <select id="getListDataInstanceRatioIndicator" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
    SET @interval_mins = #{minute};
        SELECT
        	 A.indicator,
        	<if test="deviceType == 5">
        	   	A.lfb_ratio As lfbRatio,
        	   	A.lfb_eppc As lfbEppc,
                A.mfb_ratio As mfbRatio,
                A.mfb_eppc As mfbEppc,
                A.hfb_ratio As hfbRatio,
                A.hfb_eppc As hfbEppc,
                A.mean_ratio As meanRatio,
                A.mean_eppc As meanEppc,
                A.ratio_eppc_hi As ratioEppcHi,
       	        A.ratio_eppc_lo As ratioEppcLo,                            
             </if>
 			<if test="deviceType == 6">
                A.ratio,
                A.eppc,
             </if>        
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, A.sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
        	 <if test="deviceType == 5">
                 ${schema}s3m_data_pd_htr02_1_${year} A
             </if>
 			<if test="deviceType == 6">
                 ${schema}s3m_data_pd_ams01_1_${year} A
             </if>             
        WHERE
            A.device_id = #{deviceId}
        <if test="toDate == null">
            AND A.sent_date like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>
    
    <select id="getListDataInstanceInverter" parameterType="map" resultMap="deviceListResult">
     SET @begin_datetime = '1000-01-01 00:00:00';
     SET @interval_mins = #{minute};
        SELECT
            A.vab as uab,
            A.vbc as ubc,
            A.vca as uca,
            A.va AS uan,
            A.vb AS ubn,
            A.vc AS ucn,
            A.idc as i,
            A.ia,
            A.ib,
            A.ic,
            A.pa,
            A.pb,
            A.pc,
            A.qa,
            A.qb,
            A.qc,
            A.ptotal AS pTotal,
            A.pfa,
            A.pfb,
            A.pfc,
            A.epdc,
            A.TmpCab AS tmpCab,
            A.TmpSnk AS tmpSnk,
            A.TmpTrns As tmpTrns,
            A.TmpOt AS tmpOt,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_inverter_1_${year} A
       WHERE
            A.device_id = #{deviceId}
            AND A.sent_date like "${fromDate}%"
            GROUP BY sendDate         
    </select>

    <select id="getListDataInstanceCombiner" parameterType="map" resultMap="deviceListResult">
       SET @begin_datetime = '1000-01-01 00:00:00';
       SET @interval_mins = #{minute};
        SELECT
            A.vdccombiner AS VdcCombiner,
            A.pdccombiner AS PdcCombiner,
            A.idccombiner AS IdcCombiner,
            A.t,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_combiner_1_${year} A
        WHERE
            A.device_id = #{deviceId}
            AND A.sent_date like "${fromDate}%"
            GROUP BY sendDate              
    </select>

    <select id="getListDataInstanceString" parameterType="map" resultMap="deviceListResult">
       SET @begin_datetime = '1000-01-01 00:00:00';
       SET @interval_mins = #{minute};
        SELECT
            A.vdcstr AS VdcStr,
            A.pdcstr AS PdcStr,
            A.idcstr AS IdcStr,
            A.tstr AS t,
           DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_string_1_${year} A
        WHERE
            A.device_id = #{deviceId}
            AND A.sent_date like "${fromDate}%"
            GROUP BY sendDate          
    </select>

    <select id="getListDataInstanceRMU" parameterType="map" resultMap="deviceListResult">
       SET @begin_datetime = '1000-01-01 00:00:00';
       SET @interval_mins = #{minute};
        SELECT
            A.uab,
            A.ubc,
            A.uca,
            A.uan,
            A.ubn,
            A.ucn,
            A.ia,
            A.ib,
            A.ic,
            A.pa,
            A.pb,
            A.pc,
            A.p_total AS pTotal,
            A.pfa,
            A.pfb,
            A.pfc,
            A.thd_vab AS thVab,
            A.thd_vbc AS thVbc,
            A.thd_vca AS thVca,
            A.thd_van AS thVan,
            A.thd_vbn AS thVbn,
            A.thd_vcn AS thVcn,
            A.LFB_RATIO AS lfbRatio,
            A.LFB_EPPC AS lfbEppc,
            A.MFB_RATIO AS mfbRatio,
            A.MLFB_EPPC AS mfbEppc,
            A.HLFB_RATIO AS hlfbRatio,
            A.HLFB_EPPC AS hlfbEppc,
            A.INDICATOR AS indicator,
            A.t,
            A.saw_id1 AS sawId1,
            A.saw_id2 AS sawId2,
            A.saw_id3 AS sawId3,
            A.saw_id4 AS sawId4,
            A.saw_id5 AS sawId5,
            A.saw_id6 AS sawId6,
          DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_rmu_drawer_1_${year} A
        WHERE
            A.device_id = #{deviceId}
            AND A.sent_date like "${fromDate}%"
            GROUP BY sendDate               
    </select>

    <select id="getDevicesCalculateFlag" parameterType="map" resultMap="deviceResult">
        SELECT
            *
        FROM s3m_device A
        WHERE
            A.device_id IS NOT NULL
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="systemType != null">
                AND A.system_type_id = #{systemType}
            </if>
        <if test="objectType != null">
                AND A.object_type_id = #{objectType}
            </if>
        <if test="area != null">
                AND A.area LIKE #{area}
            </if>
        <if test="loadType != null">
                AND A.loadType = #{loadType}
            </if>
        <if test="deviceIdsList != null">
                AND A.device_id IN (${deviceIdsList})
            </if>
        AND A.delete_flag = 0
        AND A.calculate_flag = 1
        ORDER BY A.device_name ASC
    </select>

    <select id="getDevicesAllFlag" parameterType="map" resultMap="deviceResult">
        SELECT
            *
        FROM s3m_device A
        WHERE
            A.device_id IS NOT NULL
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="systemType != null">
                AND A.system_type_id = #{systemType}
            </if>
        <if test="objectType != null">
                AND A.object_type_id = #{objectType}
            </if>
        <if test="area != null">
                AND A.area LIKE #{area}
            </if>
        <if test="loadType != null">
                AND A.loadType = #{loadType}
            </if>
        <if test="deviceIdsList != null">
                AND A.device_id IN (${deviceIdsList})
            </if>
            <if test="deviceType != null">
                AND A.device_type_id IN (${deviceType})
            </if>
        AND A.delete_flag = 0
        ORDER BY A.device_name ASC
    </select>


    <select id="getDeviceByObjectName" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        WHERE
            A.object_name = #{objectName}
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
    </select>

    <select id="getDataDeviceByObjectTwoLevel" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            A.device_name AS deviceName,
            A.device_type AS deviceType,
            A.system_type_id AS systemTypeId,
            B.project_name AS projectName
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        WHERE
            A.object_name = #{objectTypeName}
        <if test="customerId != null">
                AND B.customer_id = #{customerId}
            </if>
        <if test="projectId != null">
                AND A.project_id = #{projectId}
            </if>
        <if test="deviceTypeId != null">
                AND A.device_type = #{deviceTypeId}
            </if>
        AND A.delete_flag = 0
    </select>

    <select id="getDataEpLoad" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
        SET @interval_mins = #{minute};
        SELECT
            device_id AS deviceId,
            ep,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, view_time) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_pqs
        WHERE
            device_id = #{deviceId}
        <if test="viewTime == null">   
            AND view_type = 5
            </if> 
         <if test="viewTime != null">   
            AND view_type = 4
            </if>    
        <if test="toDate == null">
            AND view_time like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND view_time BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>

    <select id="getDataEpInverter" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
        SET @interval_mins = #{minute};
        SELECT
            device_id AS deviceId,
            ep,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, view_time) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_pqs
        WHERE
            device_id = #{deviceId}
           <if test="viewTime == null">   
            AND view_type = 5
            </if> 
         <if test="viewTime != null">   
            AND view_type = 4
            </if>    
        <if test="toDate == null">
            AND view_time like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND view_time BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>

    <select id="getDataEpCombiner" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
        SET @interval_mins = #{minute};
        SELECT
            device_id AS deviceId,
            EpCombiner AS ep,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, view_time) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_combiner_1_view
        WHERE
            device_id = #{deviceId}
            AND view_type = 5
        <if test="toDate == null">
            AND view_time like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND view_time BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>

    <select id="getDataEpString" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
        SET @interval_mins = #{minute};
        SELECT
            device_id AS deviceId,
            VdcStr AS ep,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, view_time) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_string_1_view
        WHERE
            device_id = #{deviceId}
            AND view_type = 5
        <if test="toDate == null">
            AND view_time like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND view_time BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>

    <select id="getDataEpRMU" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
        SET @interval_mins = #{minute};
        SELECT
            device_id AS deviceId,
            ep,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, view_time) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_rmu_drawer_1_view
        WHERE
            device_id = #{deviceId}
            AND view_type = 5
        <if test="toDate == null">
            AND view_time like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND view_time BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>

    <select id="getDataInstanceRMU" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.t,
            A.h,
            A.uab,
            A.ia,
            A.Indicator
        FROM
            ${schema}s3m_instant_data A
        WHERE
            A.device_id = #{deviceId}
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}     
    </select>

    <select id="getDataInstanceLoad" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.p_total AS pTotal,
            A.q_total AS qTotal,
            A.ia AS ia,
            A.ib AS ib,
            A.ic AS ic,
            A.pfa AS pfa,
            A.pfa AS pfb,
            A.pfa AS pfc,
            A.uab AS uab,
            A.ubc,
            A.uca,
            A.uan,
            A.ubn,
            A.ucn,
            A.pa,
            A.pb,
            A.pc,
            A.qa,
            A.qb,
            A.qc,
            A.sa,
            A.sb,
            A.sc,
            A.ep,
            A.f,
            A.sent_date AS sendDate,
            A.device_status AS status
            <if test="fromDate == null and toDate == null">
                ,C.name AS loadTypeName
            </if>
        FROM
            ${schema}s3m_instant_data A
        <if test="fromDate == null and toDate == null">
            JOIN s3m_device B ON A.device_id = B.device_id
            JOIN s3m_load_type_mst C ON B.load_type_id = C.id
        </if>    
        WHERE
            A.device_id = #{deviceId}
            <if test="fromDate != null and toDate != null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>     
    </select>
    
    <select id="getDataInstanceSensor" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.t AS tSensor,
            A.device_status AS status,
            B.location
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id    
        WHERE
            A.device_id = #{deviceId}
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}   
    </select>
    
    <select id="getDataInstanceSensorStatus" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            B.status,
            C.location
        FROM
            ${schema}s3m_instant_data A
        JOIN ${schema}s3m_data_status_1_${year} B ON A.device_id = B.device_id
        JOIN
            s3m_device C ON A.device_id = C.device_id  
        WHERE
            A.device_id = #{deviceId}
            AND B.sent_date BETWEEN #{fromDate} AND #{toDate}   
    </select>

    <select id="getPowerInstanceLoad" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.p_total)
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 1
            AND B.device_type_id = 1
            AND B.customer_id = #{customerId}
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        <if test="ids != null ">
                AND B.project_id IN (${ids})  
        </if>    
        AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getPowerInstanceInverter" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.p_total)
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 2
            AND B.device_type_id = 1
            AND B.customer_id = #{customerId}
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        <if test="ids != null ">
                AND B.project_id IN (${ids})  
        </if>        
        AND A.sent_date BETWEEN #{fromDate} AND #{toDate} 
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getPowerInstanceGrid" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.p_total)
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 5
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInDayLoad" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_load_frame_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 1
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 3
            AND A.view_time like "${day}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInDayInverter" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_inverter_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 2
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 3
            AND A.view_time like "${day}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInDayGrid" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_rmu_drawer_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 5
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 3
            AND A.view_time like "${day}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInMonthLoad" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_load_frame_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 1
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 2
            AND A.view_time like "${month}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInMonthInverter" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_inverter_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 2
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 2
            AND A.view_time like "${month}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInMonthGrid" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_rmu_drawer_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 5
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 2
            AND A.view_time like "${month}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInYearLoad" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_load_frame_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 1
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 1
            AND A.view_time like "${year}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInYearInverter" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_inverter_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 2
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 1
            AND A.view_time like "${year}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getEnergyInYearGrid" parameterType="map" resultType="java.lang.Float">
        SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_rmu_drawer_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 5
            AND B.device_type_id = 1
        <if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
        AND A.view_type = 1
            AND A.view_time like "${year}%"
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
    </select>

    <select id="getListDeviceLoad" parameterType="map" resultMap="deviceListResult">
        SELECT
                    A.device_id AS deviceId
                FROM s3m_device A
                JOIN s3m_project B ON A.project_id = B.project_id
                WHERE
                    A.system_type_id = 1
                    AND A.device_type_id = 1
                    AND A.calculate_flag = 1
                    AND A.delete_flag = 0
                    AND B.customer_id = #{customerId}
        <if test="projectId != null">
                        AND A.project_id = #{projectId}
                    </if>
    </select>

    <select id="getListDeviceInverter" parameterType="map" resultMap="deviceListResult">
        SELECT
                    A.device_id AS deviceId
                FROM s3m_device A
                JOIN s3m_project B ON A.project_id = B.project_id
                WHERE
                    A.system_type_id = 2
                    AND A.device_type_id = 1
                    AND A.calculate_flag = 1
                    AND A.delete_flag = 0
                    AND B.customer_id = #{customerId}
        <if test="projectId != null">
                        AND A.project_id = #{projectId}
                    </if>
    </select>

    <select id="getListDeviceRMU" parameterType="map" resultMap="deviceListResult">
        SELECT
                    A.device_id AS deviceId
                FROM s3m_device A
                JOIN s3m_project B ON A.project_id = B.project_id
                WHERE
                    A.system_type_id = 5
                    AND A.device_type_id = 1
                    AND A.calculate_flag = 1
                    AND A.delete_flag = 0
                    AND B.customer_id = #{customerId}
        <if test="projectId != null">
                        AND A.project_id = #{projectId}
                    </if>
    </select>

    <select id="getEnergyTotalByDeviceId" parameterType="map" resultType="java.lang.Integer">
        SELECT
            A.ep
        FROM
            ${schema}s3m_data_${type}_1_${year} A
        WHERE
            A.device_id = #{deviceId}
            ORDER BY A.sent_date DESC
            LIMIT 1     
    </select>

    <select id="getListDataPowerLoadByDay" parameterType="map" resultMap="listDataPowerResult">
        SELECT
        <if test="energy == null">
            round(sum(A.p_total),2) AS power,
            </if>
        <if test="energy != null">
            round(sum(A.ep),2) AS power,
            </if>
        A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
               AND A.view_type = 5
            </if>
        <if test="viewType != null">
               AND A.view_type = #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${day}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListDataPowerSolarByDay" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            <if test="energy == null">
            round(sum(A.p_total),2) AS power,
            </if>
            <if test="energy != null">
            round(sum(A.ep),2) AS power,
            </if>
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 2
            AND B.system_type_id = 2
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
               AND A.view_type = 5
            </if>
        <if test="viewType != null">
               AND A.view_type = #{viewType}
            </if>            
        <if test="toDate == null">
              AND A.view_time like "${day}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        group by A.view_time
            order by A.view_time ASC
    </select>

    <select id="getListDataPowerGridByDay" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.P_Total),2) AS power,
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 5
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 5
            AND A.view_time like "${day}%"
        <if test="toDate == null">
              AND A.view_time like "${day}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        group by A.view_time
            order by A.view_time ASC
    </select>


    <select id="getListDataPowerLoadByMonth" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
            AND A.view_type= 3
            </if>
        <if test="viewType != null">
            AND A.view_type= #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${month}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListDataPowerSolarByMonth" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 2
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
            AND A.view_type= 3
            </if>
        <if test="viewType != null">
            AND A.view_type= #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${month}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        group by A.view_time
            order by A.view_time ASC
    </select>

    <select id="getListDataPowerGridByMonth" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 5
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
            AND A.view_type= 3
            </if>
        <if test="viewType != null">
            AND A.view_type= #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${month}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        group by A.view_time
            order by A.view_time ASC
    </select>


    <select id="getListDataPowerLoadByYear" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
            AND A.view_type= 2
            </if>
        <if test="viewType != null">
            AND A.view_type= #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${year}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListDataPowerSolarByYear" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 2
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
            AND A.view_type= 2
            </if>
        <if test="viewType != null">
            AND A.view_type= #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${year}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        group by A.view_time
            order by A.view_time ASC
    </select>

    <select id="getListDataPowerGridByYear" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 5
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
            AND A.view_type= 2
            </if>
        <if test="viewType != null">
            AND A.view_type= #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${year}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        group by A.view_time
            order by A.view_time ASC
    </select>

    <select id="getListDataPowerLoadAll" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 1
            GROUP BY A.view_time
    </select>

    <select id="getListDataPowerSolarAll" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_inverter_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        AND A.view_type= 1
            GROUP BY A.view_time
    </select>

    <select id="getListDataPowerGridAll" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep),2) AS power, 
            A.view_time AS viewTime
        FROM 
            ${schema}s3m_data_rmu_drawer_1_view A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        AND A.view_type= 1
            GROUP BY A.view_time
    </select>

    <select id="getObjectNameById" parameterType="map" resultType="java.lang.String">
        SELECT
            object_type_name
        FROM
            s3m_object_type_mst
        WHERE
            object_type_id = #{objectTypeId}        
    </select>

    <select id="getWarnedDevice" parameterType="map" resultMap="deviceListResult">
        SELECT
            A.device_id AS deviceId,
            B.device_name AS deviceName,
            B.project_id AS projectId,
            B.device_type_id AS deviceType,
            B.priority_flag as priorityFlag
        FROM
            ${schema}s3m_warning A
        LEFT JOIN s3m_device B ON B.device_id = A.device_id
        WHERE
            A.create_date BETWEEN #{fromDate} AND #{toDate}
        AND 
            B.system_type_id = #{systemTypeId}
        <if test="projectId != null">
        AND 
            B.project_id = #{projectId}
        </if>
        <if test="warningType != null">
        AND 
            A.warning_type IN (${warningType})
        </if>
           <if test="ids != null">
            AND B.project_id IN (${ids})
        </if>
        GROUP BY
             A.device_id
    </select>

<!--    Tìm thiết bị cảnh báo mất tín hiệu-->
    <select id="getWarnedDeviceLostSignal" parameterType="map" resultMap="deviceListLostSignalResult">
        SELECT
        A.id AS id,
        A.device_id AS deviceId,
        B.device_name AS deviceName,
        A.sent_date AS sentDateInstance

        FROM
            ${schema}s3m_instant_data A
        LEFT JOIN
            s3m_device B ON B.device_id = A.device_id
        WHERE A.sent_date <![CDATA[<=]]> NOW() - INTERVAL 30 MINUTE AND B.system_type_id = #{systemTypeId}
        <if test="projectId != null">
         AND B.project_id = #{projectId}
        </if>
    </select>

<!--    Lấy device gateway trong bảng instant by Việt-->
    <select id="getDataInstanceGateway" parameterType="map" resultMap="deviceGateway">
        SELECT
            A.id AS id,
            A.device_id AS deviceId,
            A.status AS status,
            A.sim AS sim,
            A.n_rtu AS nrtu,
            A.n_mbtcp AS nmbtcp,
            A.n_plc AS nplc,
            A.n_ws AS nws,
            A.ip AS ip,
            A.sent_date AS sentDate,
            B.description AS description,
            A.Status AS status,
            A.device_status AS statusDevice
        FROM
            ${schema}s3m_instant_data A
        LEFT JOIN
            s3m_device B ON B.device_id = A.device_id
        WHERE
            A.device_id = #{deviceId}
    </select>

    <select id="getDataInstanceGatewayStatus" parameterType="map" resultMap="deviceGateway">
        SELECT
            A.id AS id,
            A.device_id AS deviceId,
            A.status AS status,
            A.sim AS sim,
            A.n_rtu AS nrtu,
            A.n_mbtcp AS nmbtcp,
            A.n_plc AS nplc,
            A.n_ws AS nws,
            A.ip AS ip,
            A.sent_date AS sentDate,
            B.description AS description,
            A.Status AS status,
            A.device_status AS statusDevice,
            B.location
        FROM
            ${schema}s3m_instant_data A
        LEFT JOIN
            s3m_device B ON B.device_id = A.device_id
        WHERE
            A.device_id = #{deviceId}
    </select>

    <select id="getListEpLoadByDay" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            sum(ep) AS power,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 10
            AND fuel_form_id = 2
            AND B.system_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
               AND A.view_type = 4
            </if>
        <if test="viewType != null">
               AND A.view_type = #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${day}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        	GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>
    
    <select id="getListTLoadByDay" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            A.t AS power,
            ROUND(SUM(sum(A.t)) OVER (ORDER BY A.view_time), 2) AS powerAccumulated,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 10
            AND fuel_form_id = #{fuelFormId}
            AND B.system_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
               AND A.view_type = 4
            </if>
        <if test="viewType != null">
               AND A.view_type = #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${day}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        	GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpSolarByDay" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 2
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
               AND A.view_type = 4
            </if>
        <if test="viewType != null">
               AND A.view_type = #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${day}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpGridByDay" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 5
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        <if test="viewType == null">
               AND A.view_type = 4
            </if>
        <if test="viewType != null">
               AND A.view_type = #{viewType}
            </if>
        <if test="toDate == null">
              AND A.view_time like "${day}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpLoadByMonth" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            ROUND(SUM(A.ep) OVER (ORDER BY A.view_time), 2) AS power,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 3
        <if test="toDate == null">
              AND A.view_time like "${month}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        	GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>
    
     <select id="getListTLoadByMonth" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            A.t AS power,
            ROUND(SUM(sum(A.t)) OVER (ORDER BY A.view_time), 2) AS powerAccumulated,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 10
            AND fuel_form_id = #{fuelFormId}
            AND B.system_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 3
        <if test="toDate == null">
              AND A.view_time like "${month}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        	GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpLoadByMonthLandmark" parameterType="map" resultMap="listEpLoadByMonthLandmark">
        SELECT
        ROUND(SUM(A.ep), 2) AS power,
        A.view_time AS viewTime
        FROM
        ${schema}s3m_data_pqs A
        JOIN
        s3m_device B ON A.device_id = B.device_id
        WHERE
        B.device_type_id = 1
        AND B.system_type_id = 1
        AND B.delete_flag = 0
        AND B.calculate_flag = 1
        AND A.view_type= 3
        <if test="toDate == null">
            AND A.view_time like "${month}%"
        </if>
        <if test="projectId != null and deviceId == null">
            AND B.project_id = #{projectId}
        </if>
        <if test="toDate != null">
            AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
        </if>
        <if test="deviceId != null">
            AND B.device_id = #{deviceId}
        </if>
        GROUP BY A.view_time
        ORDER BY A.view_time ASC
    </select>

    <select id="getListEpSolarByMonth" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
              round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 2
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 3
        <if test="toDate == null">
              AND A.view_time like "${month}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpGridByMonth" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
              round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 5
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 3
        <if test="toDate == null">
              AND A.view_time like "${month}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
       	GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpLoadByYear" parameterType="map" resultMap="listEpLoadByMonthLandmark">
        SELECT 
            ROUND(SUM(A.ep) , 2) AS power,
            A.view_time AS viewTime 
        FROM 
             ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 2
        <if test="toDate == null">
              AND A.view_time like "${year}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        	GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>
    
    <select id="getListTLoadByYear" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            A.t AS power,
            ROUND(SUM(sum(A.t)) OVER (ORDER BY A.view_time), 2) AS powerAccumulated,
            A.view_time AS viewTime 
        FROM 
             ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 10
            AND fuel_form_id = #{fuelFormId}
            AND B.system_type_id = 1
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 2
        <if test="toDate == null">
              AND A.view_time like "${year}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        	GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpSolarByYear" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
              round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
             ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 2
            AND B.calculate_flag = 1
            AND A.view_type= 2
        <if test="toDate == null">
              AND A.view_time like "${year}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpGridByYear" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
              round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
             ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 5
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 2
        <if test="toDate == null">
              AND A.view_time like "${year}%"
            </if>
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        GROUP BY A.view_time
            ORDER BY A.view_time ASC
    </select>

    <select id="getListEpLoadAll" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
            round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
             ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 1
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 1
            GROUP BY A.view_time
    </select>

    <select id="getListEpSolarAll" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
              round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
             ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 2
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 1
            GROUP BY A.view_time
    </select>

    <select id="getListEpGridAll" parameterType="map" resultMap="listDataPowerResult">
        SELECT 
              round(sum(A.ep_at_a_time),2) AS power,
            A.view_time AS viewTime 
        FROM 
             ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id 
        WHERE
            B.device_type_id = 1
            AND B.system_type_id = 5
        <if test="projectId != null and deviceId == null">
              AND B.project_id = #{projectId}
            </if>
        <if test="toDate != null">
              AND A.view_time  BETWEEN #{fromDate} AND #{toDate}
            </if>
        <if test="deviceId != null">
               AND B.device_id = #{deviceId}
            </if>
        AND B.delete_flag = 0
            AND B.calculate_flag = 1
            AND A.view_type= 1
            GROUP BY A.view_time
    </select>

    <select id="getListByDeviceType" parameterType="map" resultMap="deviceResult">
        SELECT
        *
        FROM s3m_device A
        WHERE
        <if test="customer != null">
            A.customer_id = ${customer} AND
        </if>
        <if test="project != null">
            A.project_id = ${project} AND
        </if>
        <if test="systemType != null">
            A.system_type_id = ${systemType}
        </if>
        <if test="deviceType != null">
            AND A.device_type_id = ${deviceType}
        </if>
        AND A.delete_flag = 0
        ORDER BY A.device_name ASC
        </select>
        
    <select id="getDeviceGateway" resultMap="deviceMstListResult">
        SELECT 
            *
        FROM
            s3m_device
    </select>

    <insert id="insertSettingCbnd"  parameterType="map">
        INSERT INTO s3m_setting(device_id, project_id, customer_id, type, setting_mst_id, setting_value, warning_type, description, create_id) 
        VALUES
        (#{device_id},#{projectId},#{customerId},'3','30','100','301','Nhiệt độ (T)
        <![CDATA[>=]]>
        100 °C','1'),
        (#{device_id},#{projectId},#{customerId},'3','31','10','302','Nhiệt độ (T)
        <![CDATA[<=]]>
        10 °C','1'),
        (#{device_id},#{projectId},#{customerId},'3','32','90','303','Độ ẩm (Humidity)
        <![CDATA[>=]]>
        90 (%)','1'),
        (#{device_id},#{projectId},#{customerId},'3','33','60','304','Độ ẩm (Humidity)
        <![CDATA[<=]]>
        60 (%)','1')
    </insert>

    <insert id="insertSettingCbtt"  parameterType="map">
        INSERT INTO s3m_setting(device_id, project_id, customer_id, type, setting_mst_id, setting_value, warning_type, description, create_id) 
        VALUES
        (#{deviceId},#{projectId},#{customerId},'4','30','1','401','Cảnh báo vận hành (status = 1)','1'),
        (#{deviceId},#{projectId},#{customerId},'4','31','1','402','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','32','1','403','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','33','1','404','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','34','1','405','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','35','1','406','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','36','1','407','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','37','1','408','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','38','1','409','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','39','1','410','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','40','1','411','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','41','1','412','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','42','1','413','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','43','1','414','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','44','1','415','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'4','45','1','416','Cảnh báo vận hành','1')
    </insert>

    <insert id="insertSettingInverter"  parameterType="map">
        INSERT INTO s3m_setting(device_id, project_id, customer_id, type, setting_mst_id, setting_value, warning_type, description, create_id) 
        VALUES
        (#{deviceId},#{projectId},#{customerId},'2','14','1','201','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','15','1','202','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','16','1','203','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','17','1','204','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','18','1','205','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','19','1','206','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','20','1','207','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','21','1','208','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','22','1','209','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','23','1','210','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','24','1','211','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','25','1','212','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','26','1','213','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','27','1','214','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','28','1','215','Cảnh báo vận hành','1'),
        (#{deviceId},#{projectId},#{customerId},'2','29','1','216','Cảnh báo vận hành','1')
    </insert>

    <insert id="insertSettingMeter"  parameterType="map">
        INSERT INTO s3m_setting(device_id, project_id, customer_id, type, setting_mst_id, setting_value, warning_type, description, create_id) 
        VALUES
        (#{device_id},#{projectId},#{customerId},'1','1','240','101','Uan || Ubn || Ucn <![CDATA[>]]> 240','1'),
        (#{device_id},#{projectId},#{customerId},'1','2','215','102','Uan || Ubn || Ucn <![CDATA[<]]> 215','1'),
        (#{device_id},#{projectId},#{customerId},'1','3','0.95','103','Ia || Ib || Ic <![CDATA[>=]]> 0.95 * Imccb','1'),
        (#{device_id},#{projectId},#{customerId},'1','4','70,0.85','104','((Ia + Ib + Ic)/3) / (CongSuatThietBi*1.44) <![CDATA[>]]> 70 <![CDATA[&]]> cosA || cosB || cosC <![CDATA[<]]> 0.85','1'),
        (#{device_id},#{projectId},#{customerId},'1','5','50.2','105','F <![CDATA[>]]> 50.2','1'),
        (#{device_id},#{projectId},#{customerId},'1','6','49.8','106','F <![CDATA[<]]> 49.8','1'),
        (#{device_id},#{projectId},#{customerId},'1','7','50,0.25','107','((Ia + Ib + Ic)/3) / (CongSuatThietBi*1.44) <![CDATA[>]]> 50 <![CDATA[&]]> (Imax – Imin)/Imin <![CDATA[>]]> 0.25','1'),
        (#{device_id},#{projectId},#{customerId},'1','8','6,3,2.25,0.9,0.35','108','IA_H1 || ... || IA_H10 || IB_H1 || ... || IB_H10 || IC_H1|| ...|| IC_H10 <![CDATA[>=]]> 6 - IA_H11 || ... || IA_H16 || IB_H11 || ... || IB_H16 || IC_H11|| ...|| IC_H16 <![CDATA[>=]]> 3 - IA_H17 || ... || IA_H22 || IB_H17 || ... || IB_H22 || IC_H17|| ...|| IC_H22 <![CDATA[>=]]> 2.25 - IA_H23 || ... || IA_H34 || IB_H23 || ... || IB_H34 || IC_H23|| ...|| IC_H34 <![CDATA[>=]]> 0.9 - IA_H35 || ... || IA_HN || IB_H34 || ... || IB_HN || IC_H34|| ...|| IC_HN <![CDATA[>=]]> 0.35','1'),
        (#{device_id},#{projectId},#{customerId},'1','9','3','109','VAN_H(n) || VBN_H(n) || VCN_H(n) <![CDATA[>=]]> 3','1'),
        (#{device_id},#{projectId},#{customerId},'1','10','5','110','THD_Van || THD_Vbn || THD_Vcn <![CDATA[>=]]> 5','1'),
        (#{device_id},#{projectId},#{customerId},'1','11','5','111','THD_Ia || THD_Ib || THD_Ic <![CDATA[>=]]> 5','1'),
        (#{device_id},#{projectId},#{customerId},'1','12','0','112','PFa|| PFb || PFc <![CDATA[<]]> 0','1'),
        (#{device_id},#{projectId},#{customerId},'1','13','0','113','Ua || Ub || Uc <![CDATA[<=]]> 90 (V)','1');
    </insert>
    
      <insert id="insertSettingCbpd"  parameterType="map">
        INSERT INTO s3m_setting(device_id, project_id, customer_id, type, setting_mst_id, setting_value, warning_type, description, create_id) 
        VALUES
         <if test="deviceTypeId == 5">
         	(#{deviceId},#{projectId},#{customerId},'5','46','3','501','Indicator <![CDATA[>=]]> 3','1')      
        </if>
        <if test="deviceTypeId == 6">
         	(#{deviceId},#{projectId},#{customerId},'6','47','3','601','Indicator <![CDATA[>=]]> 3','1')      
        </if>        
    </insert>
    
  <select id="getObjectByDeviceId" parameterType="map" resultType="java.lang.Integer">
        SELECT
            A.object_id
        FROM
            s3m_device A
        WHERE
            device_id IN (${deviceId})
    </select>
    
    <select id="getObjectTypeByObjId"  parameterType="map" resultMap="objectListResult">
        SELECT 
            A.id AS objectTypeId,
            A.name AS objectTypeName,
            A.img,
            C.system_type_id AS systemTypeId
        FROM
            s3m_object_type_mst A
        JOIN s3m_object B ON A.id = B.object_type_id
        JOIN s3m_device C ON B.id = C.object_id
        JOIN s3m_project D ON B.project_id = D.project_id
        WHERE
            B.id = #{objectId}
        <if test="projectId != null">
            AND D.project_id = #{projectId}
        </if>
        <if test="systemTypeId != 0 and systemTypeId != null">
           AND C.system_type_id = #{systemTypeId}
        </if> 
         GROUP BY objectTypeId, objectTypeName,  A.img
    </select>
    
    <select id="getListObjByObjectTypeId" parameterType="map" resultType="java.lang.Integer">
        SELECT
            A.id AS objectTypeId
        FROM
            s3m_object A
        JOIN s3m_device B ON A.id = B.object_id    
        WHERE
            A.object_type_id = #{objectTypeId}
            <if test="projectId == null">
            AND B.customer_id = #{customerId}
            </if>
            <if test="projectId != null">
            AND A.project_id = #{projectId}
            </if>
              <if test="systemTypeId != 0 and systemTypeId != null">
           	AND B.system_type_id = #{systemTypeId}
        	</if> 
        	 <if test="projectIds != null">
             AND A.project_id IN (${projectIds}) 
            </if>
    </select>
    
    <select id="getObjectByObjId"  parameterType="map" resultMap="objectListResult">
        SELECT
            A.id AS objectId,
            A.name AS objectTypeName,
            B.img,
            D.project_name AS projectName,
            B.name AS objectName,
            E.customer_name AS customerName
        FROM
            s3m_object A
        JOIN s3m_object_type_mst B ON B.id = A.object_type_id
        JOIN s3m_device C ON A.id = C.object_id
        JOIN s3m_project D ON C.project_id = D.project_id
        JOIN s3m_customer E ON D.customer_id = E.customer_id
        WHERE
            A.id = #{objectTypeId}
        <if test="projectId != null">
            AND D.project_id = #{projectId}
        </if>
       <if test="systemTypeId != 0 and systemTypeId != null">
           AND C.system_type_id = #{systemTypeId}
        </if> 
        GROUP BY  objectId, objectTypeName, objectName    
    </select>
    
    <select id="getDataInstanceDeviceSensor" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_name,
            A.device_type_id,
            A.system_type_id,
            B.project_name AS projectName,
            D.t AS tSensor,
            D.h,
            D.sent_date AS sendDate
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_data_temp_humidity_1_${year} D ON A.device_id = D.device_id
        WHERE
            A.device_id = #{deviceId}
            AND A.delete_flag = 0
        <if test="fromDate != null">
                AND D.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
            ORDER BY D.sent_date DESC
            LIMIT 1
    </select>
    
    <select id="getDataInstanceDeviceSensorStatus" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_name,
            A.device_type_id,
            A.system_type_id,
            B.project_name AS projectName,
            D.status,
            D.sent_date AS sendDate
        FROM
            s3m_device A  
        JOIN s3m_project B ON B.project_id = A.project_id    
        JOIN ${schema}s3m_data_status_1_${year} D ON A.device_id = D.device_id
        WHERE
            A.device_id = #{deviceId}
            AND A.delete_flag = 0
        <if test="fromDate != null">
                AND D.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
            ORDER BY D.sent_date DESC
            LIMIT 1
    </select>
    
    <select id="getObjectTypeIdByObjId" parameterType="map" resultType="java.lang.Integer">
        SELECT
            A.id
        FROM 
            s3m_object_type_mst A
        JOIN s3m_object B ON A.id = B.object_type_id
        WHERE
            B.id = #{objectId}        
    </select>
    
    <select id="getCountObjectByObjectTypeId" parameterType="map" resultMap="dataPowerResultResult">
        SELECT
            B.name,
            count(A.object_type_id) AS countDevice
        FROM
            s3m_plus.s3m_object A
        JOIN
            s3m_object_type_mst B ON A.object_type_id = B.id
        JOIN
            s3m_device C ON A.id = C.object_id     
        WHERE
            B.id = #{objectTypeId}
            AND A.project_id = #{projectId}   
            <if test="systemType != null">
                AND C.system_type_id = #{systemType}
            </if>

    </select>             
    
    <select id="getDeviceByObjectType" parameterType="map" resultMap="deviceResult">
        Select
            A.*
        from s3m_device A
        inner join s3m_object B on A.object_id = B.id
        where A.system_type_id = #{systemType} and A.project_id = #{project} and B.object_type_id = #{objectType};
    </select>
    <select id="getDeviceByLoca" parameterType="map" resultMap="deviceResult">

        SELECT A.*
        FROM s3m_plus.s3m_device A
        where
            A.system_type_id = #{systemType}
            and A.delete_flag = 0
          and A.project_id = #{project}
          <if test="location == null">
              and A.location is null
          </if>
        <if test="location != null">
            and A.location like #{location}
        </if>
    </select>
    <select id="getDeviceByLoadType" parameterType="map" resultMap="deviceResult">

        SELECT A.*
        FROM s3m_plus.s3m_device A
        where
        A.system_type_id = #{systemType}
        and A.project_id = #{project}
        and A.load_type_id = #{loadType}
        and A.delete_flag = 0
        ;
    </select>
        <select id="getSentDateInstanceLoad" parameterType="map" resultType="java.lang.String">
        SELECT
            A.sent_date
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 1
            AND B.device_type_id = 1
      		<if test="projectId != null">
                AND B.project_id = #{projectId}
            </if>
       	    AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            AND B.delete_flag = 0
            AND B.calculate_flag = 1
        ORDER BY A.sent_date DESC
		LIMIT 1
    </select>
    
    <select id="getEnergyDeviceLoadInDay" parameterType="map" resultType="java.lang.Float">
         SELECT
            sum(A.ep)
        FROM
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 1
            AND B.device_type_id = 1
            AND B.device_id = #{deviceId}
            AND A.view_type = 3
            AND A.view_time like "${day}%"
    </select>
    
     <select id="getEnergyDeviceLoadInMonth" parameterType="map" resultType="java.lang.Float">
         SELECT
            A.ep
        FROM
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id
        WHERE
            B.system_type_id = 1
            AND B.device_type_id = 1
            AND B.device_id = #{deviceId}
            AND A.view_type = 2
            AND A.view_time like "${month}%"
    </select>

    <select id="getNameDevice" parameterType="map" resultMap="deviceNameData">
        SELECT
            A.device_id, A.device_name
        FROM
            s3m_plus.s3m_device A
        WHERE
            device_id = #{deviceId};
    </select>

    
    <select id="getDataInstanceHTR02" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_status AS status,
            A.alarm_status_bit AS alarmStatusBit,
            A.lfb_ratio AS lfbRatio,
            A.lfb_eppc AS lfbEppc,
            A.mfb_ratio AS mfbRatio,
            A.mfb_eppc AS mfbEppc,
            A.hfb_ratio AS hfbRatio,
            A.hfb_eppc AS hfbEppc,
            A.mean_ratio AS meanRatio,
            A.mean_eppc AS meanEppc,
            A.ratioxeppc_hi AS ratioEppcHi,
            A.ratioxeppc_lo AS ratioEppcLo,
            A.indicator,
            A.sent_date AS sendDate,
            B.location
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id    
        WHERE
            A.device_id = #{deviceId}
            <if test="fromDate != null">
                AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>  
    </select>
    
    <select id="getDataInstanceAMS01" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_status AS status,
            A.indicator,
            A.ratio,
            A.eppc,
            A.pd_level AS pdLevel,
            A.notifier,
            A.sent_date AS sendDate,
            B.location
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id    
        WHERE
            A.device_id = #{deviceId}
            <if test="fromDate != null">
                AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
    </select>
    
    <select id="getListDataInstanceGateway" parameterType="map" resultMap="deviceListResult">
         SET @begin_datetime = '1000-01-01 00:00:00';
         SET @interval_mins = #{minute};
         SELECT
            A.status,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, A.sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
         FROM
            ${schema}s3m_data_gw_1_${year} A
         WHERE
            A.device_id = #{deviceId}
        <if test="toDate == null">
            AND A.sent_date like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate      
    </select>

    <insert id="insertSettingCbll"  parameterType="map">
        INSERT INTO s3m_setting(
        device_id, project_id, customer_id, type, setting_mst_id, setting_value, warning_type, description)
        VALUES
            (#{deviceId},#{projectId},#{customerId},'10','66','100','1001','Fs <![CDATA[>=]]> 100 (Fs là lưu lượng)'),
            (#{deviceId},#{projectId},#{customerId},'10','67','10','1002','Fs <![CDATA[<=]]> 10 (Fs là lưu lượng)')
    </insert>

    <insert id="insertSettingCbax"  parameterType="map">
        INSERT INTO s3m_setting(
            device_id, project_id, customer_id, type, setting_mst_id, setting_value, warning_type, description)
        VALUES
            (#{deviceId},#{projectId},#{customerId},'7','64','100','701','P <![CDATA[>=]]> 100 (P là áp suất)'),
            (#{deviceId},#{projectId},#{customerId},'7','65','10','702','P <![CDATA[<=]]> 10 (P là áp suất)')
    </insert>
    
     <select id="getDataInstancePressure" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_status AS status,
            A.alarm_status_bit AS alarmStatusBit,
            A.p,
            A.crc,
            A.sent_date AS sendDate,
            B.location
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id    
        WHERE
            A.device_id = #{deviceId}
            <if test="fromDate != null">
                AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>  
    </select>
    
    <select id="getDataInstanceFlow" parameterType="map" resultMap="deviceResult">
        SELECT
            A.device_id,
            A.device_status AS status,
            A.fs,
            A.fm,
            A.fh,
            A.v,
            A.t,
            A.crc,
            A.sent_date AS sendDate,
            B.location
        FROM
            ${schema}s3m_instant_data A
        JOIN
            s3m_device B ON A.device_id = B.device_id    
        WHERE
            A.device_id = #{deviceId}
            <if test="fromDate != null">
                AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
            </if>
    </select>
    
     <select id="getDataInstanceFlowAccumulation" parameterType="map" resultMap="deviceResult">
        SELECT
           	A.t,
            A.view_type As viewType,
            A.view_time As viewTime
        FROM
            ${schema}s3m_data_pqs A
        JOIN
            s3m_device B ON A.device_id = B.device_id    
        WHERE
            A.device_id = #{deviceId}      
             <if test="viewType != null">
                AND A.view_type = #{viewType}
            </if>
             <if test="viewType == 3 and fromDate != null">
                AND A.view_time = SUBSTRING(#{fromDate}, 1, 10)
            </if>
            <if test="viewType == 2 and fromDate != null">
                AND A.view_time = SUBSTRING(#{fromDate}, 1, 7)
            </if>
              GROUP BY A.device_id
    </select>
    
     <select id="getListDataInstancePressure" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
    SET @interval_mins = #{minute};
        SELECT
        	   	A.p,
        	   	A.crc,                                
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, A.sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM       	
               ${schema}s3m_data_pressure_1_${year} A         
        WHERE
            A.device_id = #{deviceId}
        <if test="toDate == null">
            AND A.sent_date like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>
<!--     <select id="getListDataInstanceFlow" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
    SET @interval_mins = #{minute};
        SELECT
        	device_id AS deviceId,
            t,                    
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, A.sent_date) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM       	
               ${schema}s3m_data_flow_1_${year} A         
        WHERE
            A.device_id = #{deviceId}
        <if test="toDate == null">
            AND A.sent_date like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND A.sent_date BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>
     -->
    
     <select id="getListDataInstanceFlow" parameterType="map" resultMap="deviceListResult">
        SET @begin_datetime = '1000-01-01 00:00:00';
        SET @interval_mins = #{minute};
        SELECT
            device_id AS deviceId,
            t,
            t_at_a_time as tAccumulationDay,
            DATE_ADD(@begin_datetime, Interval FLOOR(TIMESTAMPDIFF(MINUTE, @begin_datetime, view_time) / @interval_mins) * @interval_mins minute) AS sendDate
        FROM
            ${schema}s3m_data_pqs
        WHERE
            device_id = #{deviceId}
        <if test="viewTime == null">   
            AND view_type = 5
            </if> 
         <if test="viewTime != null">   
            AND view_type = 4
            </if>    
        <if test="toDate == null">
            AND view_time like "${fromDate}%"
             </if>
        <if test="toDate != null">
            AND view_time BETWEEN #{fromDate} AND #{toDate}
             </if>
        GROUP BY sendDate
    </select>
</mapper>